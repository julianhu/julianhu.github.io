<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[隐湖小筑 - Julian's home]]></title>
  <subtitle><![CDATA[不负此生，不负己心]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://chunhui.hu/"/>
  <updated>2015-05-02T10:22:32.000Z</updated>
  <id>http://chunhui.hu/</id>
  
  <author>
    <name><![CDATA[Julian Hu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[将VIM打造成自己的IDE]]></title>
    <link href="http://chunhui.hu/2013/12/07/Change-VIM-to-your-IDE/"/>
    <id>http://chunhui.hu/2013/12/07/Change-VIM-to-your-IDE/</id>
    <published>2013-12-07T03:40:14.000Z</published>
    <updated>2015-05-02T10:22:32.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>写在前面<br> 一般来说，一个完整的IDE至少需要具备以下几个特征：代码加亮、函数定位、文件浏览、导航器、代码补全。所以，VIM本身来说并不是一个合格的IDE，但是对于喜欢它的人，可以通过它强大的插件系统来实现以上全部功能。<br> 另外，VIM作为IDE更有以下这些优势：<br> 1）脱离鼠标，提高效率<br> 2）插件丰富，超强DIY<br> 3）简单轻量，一个vimrc走天下<br> 4）跨平台（Linux/Win/Mac）：VIM，gVIM，MacVIM<br> 5）可以直接在linux开发机上开发<br> 在介绍如何打造IDE之前，首先请先检查系统自带的VIM的版本，请勿&lt;7.0，尽量安装最新版。</p>
 <a id="more"></a>
</li>
<li><p>Ctags<br> 2.1. 简介<br> Ctags是一个用于从程序源代码树产生索引文件（或tag文件)，从而便于文本编辑器来实现快速定位的实用工具。<br> 2.2. 官网<br> <a href="http://ctags.sourceforge.net/" target="_blank" rel="external">http://ctags.sourceforge.net/</a><br> 2.3. 安装<br> 注：请下载5.6之后的版本</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://prdownloads.sourceforge.net/ctags/ctags-<span class="number">5.8</span>.tar.gz</span><br><span class="line">tar -xzvf ctags-<span class="number">5.8</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ctags-<span class="number">5.8</span></span><br><span class="line">.configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p> 2.4. 索引</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/your_code_path</span><br><span class="line">ctags -R （要支持JS请参考附录）</span><br></pre></td></tr></table></figure>
<p> 注：如果做了代码修改，比如函数的定义变更、删除，需要重新建立索引。<br> 2.5. 使用<br> 1）在vim中运行命令：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> tags=/home/your_code_path/tags</span><br></pre></td></tr></table></figure>
<p> 2）跳转<br> <code>Ctrl + ]</code>：跳转到函数定义处<br> <code>Ctrl + t</code>：跳回上一处</p>
</li>
<li><p>Cscope<br> 3.1. 简介<br> “Ctags的超频版”，不仅支持变量/函数的定义查询，还记录了函数的调用处查询等功能。<br> 3.2. 官网<br> <a href="http://cscope.sourceforge.net/" target="_blank" rel="external">http://cscope.sourceforge.net/</a><br> 3.3. 安装<br> 1）检查系统中是否有cscope命令，如果没有则如下安装：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p> 2）运行</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim --version | grep cscope</span><br></pre></td></tr></table></figure>
<p> 查看vim是否支持cscope，如果有“<code>+cscope</code>”则支持，否则不支持<br> 3）如果vim不支持cscope，则需要加上以下参数重新编译vim：<br> <code>--enable-cscope</code><br> 3.4. 使用<br> 1）生成索引</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -iname <span class="string">'*.php'</span> -o -iname <span class="string">'*.js'</span> &gt; cscope.files</span><br><span class="line">cscope -bkq （更多参数请查看附录）</span><br></pre></td></tr></table></figure>
<p> 2）生效<br> 用vim打开文件，输入命令：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:cs add /home/your_code_path/cscope.out /home/your_code_path</span><br></pre></td></tr></table></figure>
<p> 3）用法</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:cs find s name         查找函数名、宏、枚举值等出现的地方</span><br><span class="line">:cs find g name         查找函数、宏、枚举等定义的位置，类似ctags所提供的功能</span><br><span class="line">:cs find d name         查找本函数调用的函数</span><br><span class="line">:cs find c name         查找调用本函数的函数</span><br><span class="line">:cs find t name          查找指定的字符串</span><br><span class="line">:cs find e name         查找egrep模式，相当于egrep功能，但查找速度要快些</span><br><span class="line">:cs find f name          查找并打开文件，类似vim的find功能</span><br><span class="line">:cs find i name          查找包含本文件的文件</span><br></pre></td></tr></table></figure>
<p> 可以在.vimrc文件中做如下快捷键映射：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nmap &lt;C-\&gt;s :cs find s &lt;C-R&gt;=expand(<span class="string">"&lt;cword&gt;"</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;g :cs find g &lt;C-R&gt;=expand(<span class="string">"&lt;cword&gt;"</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;c :cs find c &lt;C-R&gt;=expand(<span class="string">"&lt;cword&gt;"</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;t :cs find t &lt;C-R&gt;=expand(<span class="string">"&lt;cword&gt;"</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;d :cs find d &lt;C-R&gt;=expand(<span class="string">"&lt;cword&gt;"</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;e :cs find e &lt;C-R&gt;=expand(<span class="string">"&lt;cword&gt;"</span>)&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;f :cs find f &lt;C-R&gt;=expand(<span class="string">"&lt;cfile&gt;"</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;i :cs find i &lt;C-R&gt;=expand(<span class="string">"&lt;cfile&gt;"</span>)&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">nmap &lt;C-\&gt;z :cs find i &lt;C-R&gt;=expand(<span class="string">"%:t"</span>)&lt;CR&gt;&lt;CR&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TagList<br> 4.1. 简介<br> VIM插件，用来在Vim的一个垂直或水平的分割窗口中显示一个文件中定义的tags（函数, 类, 结构,变量等）<br> 4.2. 官网<br> <a href="http://www.vim.org/scripts/script.php?script_id=273" target="_blank" rel="external">http://www.vim.org/scripts/script.php?script_id=273</a><br> 4.3. 安装<br> 1）找到系统的vim插件目录和文档目录，如：<code>/usr/share/vim/vim72/plugin和/usr/share/vim/vim72/doc</code><br> 2）将下载的插件解压，里面的文件分别复制到对应以上两个目录中<br> 4.4. 使用<br> 1）在<code>~/.vimrc</code>文件中添加下面两句：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> Tlist_Show_One_File=<span class="number">1</span></span><br><span class="line"><span class="built_in">let</span> Tlist_Exit_OnlyWindow=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p> 2）用vim打开一个源代码<br> 3）运行命令：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:Tlist</span><br></pre></td></tr></table></figure>
<p> 4）按键<br> 回车：跳到定义<br> 空格：显示函数完整定义</p>
</li>
<li><p>WinManager<br> 5.1. 简介<br> 文件浏览器和窗口管理器<br> 5.2. 官网<br> <a href="http://www.vim.org/scripts/script.php?script_id=95" target="_blank" rel="external">http://www.vim.org/scripts/script.php?script_id=95</a><br> 5.3. 安装<br> 同Taglist。<br> 5.4. 使用<br> 1）在<code>~/.vimrc</code>中增加下面两句：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> g:winManagerWindowLayout=<span class="string">'FileExplorer|TagList'</span></span><br><span class="line">nmap wm :WMToggle&lt;cr&gt;</span><br></pre></td></tr></table></figure>
<p> 2）重启vim，在normal模式下输入”<code>wm</code>“，则会调出文件管理器和TagList窗口<br> 3）再次输入”<code>wm</code>“命令可以关闭以上两个窗口</p>
</li>
<li><p>MiniBufExplorer<br> 6.1. 简介<br> Vim插件，用来快速浏览和操作缓冲区（buffer）。<br> 6.2. 官网<br> <a href="http://www.vim.org/scripts/script.php?script_id=159" target="_blank" rel="external">http://www.vim.org/scripts/script.php?script_id=159</a><br> 6.3. 安装<br> 同TagList。<br> 6.4. 使用<br> 1） 当你只编辑一个buffer的时候MiniBufExplorer派不上用场, 当你打开第二个buffer的时候, MiniBufExplorer窗口就会自动出来了。<br> 2） 当你把光标置于这个窗口时, 有下面几个快捷键可以用：<br> <code>&lt;Tab&gt;</code>      向前循环切换到每个buffer名上<br> <code>&lt;S-Tab&gt;</code>    向后循环切换到每个buffer名上<br> <code>&lt;Enter&gt;</code>    在打开光标所在的buffer<br> <code>d</code>          删除光标所在的buffer<br> 3） 在<code>~/.vimrc</code>中设置：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> g:miniBufExplMapWindowNavVim = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p> 则可以用<c-h,j,k,l>切换到上下左右的窗口中去。<br> 4） 在命令模式下：<br> <code>:bn</code>            打开当前buffer的下一个buffer<br> <code>:bp</code>            打开当前buffer的前一个buffer<br> <code>:b&quot;num&quot;</code>        打开指定的buffer，”num”指的是buffer开始的那个数字</c-h,j,k,l></p>
</li>
<li><p>new-omni-completion(全能补全)<br> 7.1. 前提<br> 安装了Ctags，并生成索引文件。<br> 7.2. 使用<br> 1）在~/.vimrc文件中增加下面两句:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filetype plugin indent on 打开文件类型检测</span><br><span class="line"><span class="built_in">set</span> completeopt=longest,menu 关掉智能补全时的预览窗口（需要VIM <span class="number">7</span>以上才支持）</span><br></pre></td></tr></table></figure>
<p> 2）打开代码文件，进入Insert模式, 然后按下”<code>Ctrl+X Ctrl+O</code>“即可<br> 3）快捷键<br> <code>Ctrl+P</code>       向前切换成员<br> <code>Ctrl+N</code>       向后切换成员<br> <code>Ctrl+E</code>       表示退出下拉窗口, 并退回到原来录入的文字<br> <code>Ctrl+Y</code>       表示退出下拉窗口, 并接受当前选项</p>
</li>
<li><p>Vundle<br> 8.1. 简介<br> VIM插件管理工具，使用git来管理插件，更新方便，支持搜索，一键更新，从此只需要一个vimrc走天下。<br> 8.2. 官网<br> <a href="https://github.com/gmarik/vundle" target="_blank" rel="external">https://github.com/gmarik/vundle</a></p>
</li>
<li><p>其他常用命令<br> <code>%</code>      跳转到配对的括号去<br> <code>[[</code>     跳转到代码块的开头去(但要求代码块中’{‘必须单独占一行)<br> <code>gD</code>     跳转到局部变量的定义处<br> <code>&#39;&#39;</code>     跳转到光标上次停靠的地方, 是两个’, 而不是一个”<br> <code>mx</code>     设置书签,x只能是a-z的26个字母<br> <code>`x</code>     跳转到书签处(“`“是1左边的键)<br> <code>&gt;&gt;</code>     增加缩进,”x&gt;&gt;”表示增加以下x行的缩进<br> <code>&lt;&lt;</code>     减少缩进,”x&lt;&lt;”表示减少以下x行的缩进</p>
<p> 参看：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">help</span> usr_29</span><br><span class="line">:<span class="built_in">help</span> usr_30</span><br></pre></td></tr></table></figure>
</li>
<li><p>附录<br>10.1. 让Ctags支持Javascript</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ctags</span><br></pre></td></tr></table></figure>
<p>输入以下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--langdef=js</span><br><span class="line">--langmap=js:.js</span><br><span class="line">--regex-js=/(,|(;|^)[ \t]*(var|<span class="built_in">let</span>|([A-Za-z_$][A-Za-z0-<span class="number">9</span>_$.]+\.)*))[ \t]*([A-Za-z0-<span class="number">9</span>_$]+)[ \t]*=[ \t]*\&#123;/\<span class="number">5</span>/,object/</span><br><span class="line">--regex-js=/(,|(;|^)[ \t]*(var|<span class="built_in">let</span>|([A-Za-z_$][A-Za-z0-<span class="number">9</span>_$.]+\.)*))[ \t]*([A-Za-z0-<span class="number">9</span>_$]+)[ \t]*=[ \t]*<span class="keyword">function</span>[ \t]*\(/\<span class="number">5</span>/,<span class="keyword">function</span>/</span><br><span class="line">--regex-js=/(,|(;|^)[ \t]*(var|<span class="built_in">let</span>|([A-Za-z_$][A-Za-z0-<span class="number">9</span>_$.]+\.)*))[ \t]*([A-Za-z0-<span class="number">9</span>_$]+)[ \t]*=[ \t]*\[/\<span class="number">5</span>/,array/</span><br><span class="line">--regex-js=/(,|(;|^)[ \t]*(var|<span class="built_in">let</span>|([A-Za-z_$][A-Za-z0-<span class="number">9</span>_$.]+\.)*))[ \t]*([A-Za-z0-<span class="number">9</span>_$]+)[ \t]*=[ \t]*[^<span class="string">"]'[^']*/\5/,string/</span><br><span class="line">--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*(true|false)/\5/,boolean/</span><br><span class="line">--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*[0-9]+/\5/,number/</span><br><span class="line">--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*=[ \t]*.+([,;=]|$)/\5/,variable/</span><br><span class="line">--regex-js=/(,|(;|^)[ \t]*(var|let|([A-Za-z_$][A-Za-z0-9_$.]+\.)*))[ \t]*([A-Za-z0-9_$]+)[ \t]*[ \t]*([,;]|$)/\5/,variable/</span><br><span class="line">--regex-js=/function[ \t]+([A-Za-z0-9_$]+)[ \t]*\([^)]*\)/\1/,function/</span><br><span class="line"> </span><br><span class="line">--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*\&#123;/\2/,object/</span><br><span class="line">--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*function[ \t]*\(/\2/,function/</span><br><span class="line">--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*\[/\2/,array/</span><br><span class="line">--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-9_$]+)[ \t]*:[ \t]*[^"</span>]<span class="string">'[^'</span>]*/\<span class="number">2</span>/,string/</span><br><span class="line">--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-<span class="number">9</span>_$]+)[ \t]*:[ \t]*(<span class="literal">true</span>|<span class="literal">false</span>)/\<span class="number">2</span>/,boolean/</span><br><span class="line">--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-<span class="number">9</span>_$]+)[ \t]*:[ \t]*[<span class="number">0</span>-<span class="number">9</span>]+/\<span class="number">2</span>/,number/</span><br><span class="line">--regex-js=/(,|^)[ \t]*([A-Za-z_$][A-Za-z0-<span class="number">9</span>_$]+)[ \t]*:[ \t]*[^=]+([,;]|$)/\<span class="number">2</span>/,variable/</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://gist.github.com/tim-smart/199338" target="_blank" rel="external">https://gist.github.com/tim-smart/199338</a><br>10.2. Cscope生成索引常用选项<br><code>-R</code>: 在生成索引文件时，搜索子目录树中的代码，如果已经在<code>cscope.files</code>中把所有的文件都打印入了列表中，则不需要该选项<br><code>-b</code>: 只生成索引文件，不进入cscope的界面<br><code>-q</code>: 生成<code>cscope.in.out</code>和<code>cscope.po.out</code>文件，加快cscope的索引速度<br><code>-k</code>: 在生成索引文件时，不搜索<code>/usr/include</code>目录<br><code>-i</code>: 如果保存文件列表的文件名不是<code>cscope.files</code>时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用“-”，表示由标准输入获得文件列表。<br><code>-I dir</code>: 在<code>-I</code>选项指出的目录中查找头文件<br><code>-u</code>: 扫描所有文件，重新生成交叉索引文件<br><code>-C</code>: 在搜索时忽略大小写<br><code>-P path</code>: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用它了。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>写在前面<br> 一般来说，一个完整的IDE至少需要具备以下几个特征：代码加亮、函数定位、文件浏览、导航器、代码补全。所以，VIM本身来说并不是一个合格的IDE，但是对于喜欢它的人，可以通过它强大的插件系统来实现以上全部功能。<br> 另外，VIM作为IDE更有以下这些优势：<br> 1）脱离鼠标，提高效率<br> 2）插件丰富，超强DIY<br> 3）简单轻量，一个vimrc走天下<br> 4）跨平台（Linux/Win/Mac）：VIM，gVIM，MacVIM<br> 5）可以直接在linux开发机上开发<br> 在介绍如何打造IDE之前，首先请先检查系统自带的VIM的版本，请勿&lt;7.0，尽量安装最新版。</p>]]>
    
    </summary>
    
      <category term="IDE" scheme="http://chunhui.hu/tags/IDE/"/>
    
      <category term="Linux" scheme="http://chunhui.hu/tags/Linux/"/>
    
      <category term="VIM" scheme="http://chunhui.hu/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[上传文件组件使用cursor:pointer在webkit内核浏览器下失效的解决方案]]></title>
    <link href="http://chunhui.hu/2013/12/04/upload-file-module-set-cursor-pointer-in-webkit-browser/"/>
    <id>http://chunhui.hu/2013/12/04/upload-file-module-set-cursor-pointer-in-webkit-browser/</id>
    <published>2013-12-04T08:07:13.000Z</published>
    <updated>2015-05-02T09:35:55.000Z</updated>
    <content type="html"><![CDATA[<p>我们使用的上传组件对浏览器的上传控件做了美化，将原生的上传按钮 做了透明化，覆盖在自定义的文字之上，比如“上传图片”。</p>
<p>但是今天测试提出一个需求，鼠标放在这些文字上要显示手型，结果发现<code>cursor:pointer</code>对<code>webkit</code>内核的浏览器（safari和chrome等）不生效。</p>
<p>经过一番查找资料，找到了以下几种解决方案。</p>
<ol>
<li><p>通用CSS解决方案<br> 设置了<code>cursor:pointer</code>后，webkit内核浏览器的上传控件中只有文字部分显示手型，button部分还是指针型，所以可以设置<code>right:0</code>以及<code>font-size</code>放大文字，将控件的文字部分遮罩在我们自定义的文字上面。<br> 演示地址可以看<a href="http://jsfiddle.net/mnjKX/16/" target="_blank" rel="external">这里</a></p>
</li>
<li><p>Webkit浏览器特性CSS解决方案<br> 设置手型：</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="pseudo">::-webkit-file-upload-button</span> <span class="rules">&#123; <span class="rule"><span class="attribute">cursor</span>:<span class="value">pointer</span></span>; &#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong> 参考资料 </strong><br><a href="http://stackoverflow.com/questions/7554845/the-cursorpointer-property-doesnt-apply-to-file-upload-buttons-in-webkit-brows" target="_blank" rel="external">http://stackoverflow.com/questions/7554845/the-cursorpointer-property-doesnt-apply-to-file-upload-buttons-in-webkit-brows</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们使用的上传组件对浏览器的上传控件做了美化，将原生的上传按钮 做了透明化，覆盖在自定义的文字之上，比如“上传图片”。</p>
<p>但是今天测试提出一个需求，鼠标放在这些文字上要显示手型，结果发现<code>cursor:pointer</code>对<code>webk]]>
    </summary>
    
      <category term="css" scheme="http://chunhui.hu/tags/css/"/>
    
      <category term="webkit" scheme="http://chunhui.hu/tags/webkit/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《JavaScript高级程序设计》读书笔记：第4章 变量、作用域和内存问题]]></title>
    <link href="http://chunhui.hu/2012/04/15/Professional-JavaScript-for-Web-Developers-Chapter-4-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/15/Professional-JavaScript-for-Web-Developers-Chapter-4-reading-notes/</id>
    <published>2012-04-15T14:19:48.000Z</published>
    <updated>2015-05-01T15:42:01.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p><strong>基本类型值</strong>指的是那些保存在栈内存中的简单数据段，即这种值完全保存在内存中的一个位置。<br><strong>引用类型值</strong>则是指那些保存在堆内存中的对象，意思是变量中保存的实际上只是一个指针，这个指针指向内存中的另一个位置，该位置保存对象。</p>
</li>
<li><p>在将一个值赋给变量时，解析器必须确定这个值是基本类型值，还是引用类型值。<br> 五种基本数据类型（Undefined、Null、Boolean、Number、String）的值在内存中分别占有固定大小的空间，因此它们的值保存在栈内存中，这样也可以提高查询变量的速度。这些变量是按值访问的，操作的是它们实际保存的值。<br> 如果赋给变量的是一个引用类型的值，则必须在堆内存中为这个值分配空间。由于这种值的大小不固定，因此不能把它们保存到栈内存中。但内存地址的大小是固定的，因此可以把内存地址保存在栈内存中。这样可以通过保存在栈中的内存地址查找到保存在堆中的值。这种访问方式叫做按引用访问。<br>如下图所示：<br> <img src="http://7sbyks.com1.z0.glb.clouddn.com/js0401.jpg" alt=""></p>
 <a id="more"></a>
</li>
<li><p>动态属性<br> 对于引用类型的值，可以为其动态添加属性和方法，也可以改变和删除其属性和方法。<br> 但是不能给基本类型的值添加属性，尽管这样做不会导致任何错误。如：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Eric"</span>;</span><br><span class="line">name.age = <span class="number">27</span>;</span><br><span class="line">alert(name.age);     <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复制变量值<br> 如果从一个变量向另一个变量复制基本类型的值，会在栈中创建一个新值，然后把该值复制到为新变量分配的位置上。如：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num <span class="number">2</span> = num1;</span><br></pre></td></tr></table></figure>
<p> 以上过程用图表示如下：<br> <img src="http://7sbyks.com1.z0.glb.clouddn.com/js0402.jpg" alt=""></p>
<p> 当从一个变量向另一个变量复制引用类型的值时，同样也会将存储在栈中的值（实际为一个指针）复制一份到新的空间中，因此复制结束后两个变量将引用同一个对象。改变其中一个变量，就会影响另一个变量。如：    </p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1.name = <span class="string">"Eric"</span>;</span><br><span class="line">alert(obj2.name);     <span class="comment">// Eric</span></span><br></pre></td></tr></table></figure>
<p> 用图表示如下：<br> <img src="http://7sbyks.com1.z0.glb.clouddn.com/js0403.jpg" alt=""></p>
</li>
<li><p>传递参数<br> ECMAScript中所有函数的参数都是按值传递的。即，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。<br> 访问变量有按值和按引用两种方式，而参数只能按值传递。<br> 在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（即命名参数，或者arguments对象中的一个元素）。<br> 在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。<br> 以下例子可以证明对象是按值传递的：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">funciton setName(obj) &#123;</span><br><span class="line">     obj.name = <span class="string">"Eric"</span>;</span><br><span class="line">     obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">     obj.name = <span class="string">"Greg"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">setName(person);</span><br><span class="line">alert(person.name);     <span class="comment">// "Eric"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>检测类型<br> 检测一个变量是不是基本数据类型，typeof操作符是最佳的工具。但在检测引用类型的值时，typeof的作用不大。<br> 注：typeof检测对象和null都返回”object“。检测函数时返回”function“。在safari和Chrome中使用typeof检测正则表达式时，会错误的返回”function“。</p>
<p> 如果想知道是什么类型的对象，用<code>instanceof</code>操作符，语法如下：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = variable <span class="keyword">instanceof</span> constructor</span><br></pre></td></tr></table></figure>
<p> 如果变量是给定引用类型（由构造函数表示）的实例，那么instanceof操作符就会返回true。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);     <span class="comment">// 变量person是Object吗？   </span></span><br><span class="line">alert(colors <span class="keyword">instanceof</span> <span class="built_in">Array</span>);        <span class="comment">// 变量colors是Array吗？</span></span><br><span class="line">alert(pattern <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);   <span class="comment">// 变量pattern是RegExp吗？</span></span><br></pre></td></tr></table></figure>
<p> 根据规定，所有引用类型的值都是Object的实例。因此，在检测一个引用类型值和Object构造函数时，instanceof操作符始终会返回true。如果使用instanceof操作符检测基本类型的值，则始终返回false，因为基本类型不是对象。</p>
</li>
<li><p>执行环境<br> <code>执行环境</code>：即<code>execution context</code>，定义了变量或函数有权访问的其他数据，决定了它们各自的行为。<br> 每个执行环境都有一个与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。虽然我们编写的代码无法访问这个对象，但解析器在处理数据时会在后台使用它。<br> 全局执行环境是最外围的一个执行环境。根据ECMAScript实现所在的宿主环境不同，表示执行环境的对象也不一样。<br> 在web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法创建的。<br> 某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局执行环境直到应用程序退出——例如关闭网页或浏览器——时才会被销毁）。<br> 每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript程序中的执行流正是由这个方便的机制控制着。</p>
</li>
<li><p>作用域<br> 当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。<br> 作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问。<br> 作用域链的前端，始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object）作为变量对象。活动对象在最开始时只包含一个变量，即arguments对象（这个对象在全局环境中是不存在的）。<br> 作用域链中的下一个变量对象来自包含（外部）环境，而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中的最后一个对象。<br> 标识符解析是沿着作用域链一级一级地搜索标识符的过程。搜索始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。<br> 内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。<br> 注：函数参数也被当作变量来对待，因此其访问规则与执行环境中的其他变量相同。</p>
</li>
<li><p>延长作用域链<br> 有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除。<br> 具体来说，就是当执行流进入下列任何一个语句时，作用域链就会得到加长：<br> 1）try-catch语句的catch块；<br> 2）with语句。<br> 这两个语句都会在作用域链的前端添加一个变量对象。对with语句来说，其变量对象中包含着为指定对象的所有属性和方法所做的变量声明。对catch语句来说，其变量对象中包含的是被抛出的错误对象的声明。这些变量对象都是只读的，因此在with和catch语句中声明的变量都会被添加到所在执行环境的变量对象中。如：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> qs = <span class="string">"?debug=true"</span>;</span><br><span class="line">     <span class="keyword">with</span>(location) &#123;</span><br><span class="line">          <span class="keyword">var</span> url = href + qs;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = buildUrl();</span><br><span class="line">alert(result);</span><br></pre></td></tr></table></figure>
<p> 在with语句内部定义了一个名为url的变量，由于with语句的变量对象是只读的，结果url就成了函数执行环境的一部分，因而可以作为函数的值被返回。<br> 注：在IE的JavaScript实现中，存在一个与标准不一致的地方，即在catch语句中捕获的错误对象会被添加到执行环境的变量对象中。换句话说，即使是在catch块的外部也可以访问到错误对象。</p>
</li>
<li><p>JS中没有块级作用域。如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> color = <span class="string">"blue"</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(color);     <span class="comment">// "blue"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在使用var关键词声明变量时，这个变量将被自动添加到距离最近的可用环境中。对于函数而言，就是函数的局部环境；对于with语句而言，是与它同级别的代码环境。<br>如果变量在未经声明的情况下被初始化，那么该变量会被自动添加到全局环境。<br>建议在初始化变量之前，一定要先声明。</p>
</li>
<li><p>变量查询也不是没有代价的。访问局部变量要比访问全局变量更快，因为不用向上搜索作用域链。</p>
</li>
<li><p>垃圾收集<br>JavaScript的垃圾收集机制原理很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。<br>垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存。用于标识无用变量的策略会因实现而异。</p>
</li>
<li><p>标记清除（mark-and-sweep）<br>JS中最常用的垃圾收集方式是标记清除。当变量进入环境（比如在函数中声明一个变量）时，就将这个变量标记为”进入环境“。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为”离开环境“。<br>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。<br>到2008年为止，IE、FF、Opera、Chrome和Safari的实现都是标记清除式的策略，只不过垃圾收集的时间间隔互有不同。</p>
</li>
<li><p>引用计数（reference counting）<br>它会跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变为0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。<br>Netscape3.0是最早使用引用计数策略的浏览器，但是很快就遇到了严重的问题：循环引用。<br>循环引用指的是对象A中包含一个指向对象B的指针，而对象B中也包含了一个指向对象A的引用。如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">problem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> objectA = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">     <span class="keyword">var</span> objectB = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">     </span><br><span class="line">     objectA.someOtherObject = objectB;</span><br><span class="line">     objectB.anotherObject = objectA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>objectA和objectB通过各自的属性相互引用，因此这两个对象的引用次数都时2。在采用标记清除策略的实现中，由于函数执行之后两个对象都离开了作用域，因此这种相互引用不是个问题。但在采用引用计数策略的实现中，当函数执行完毕后，objectA和objectB还将继续存在，因为它们的引用次数永远不会是0。假如这个函数被重复多次调用，就会导致大量内存得不到回收。<br>因此Netscape在4.0时放弃了引用计数方式。<br>IE中有一部分对象并不是原生的JavaScript对象。例如，其BOM和DOM中的对象就是使用C++以COM对象的形式实现的，而COM对象的垃圾收集机制采用的是引用计数策略。因此，即使IE的JS引擎是使用标记清除策略来实现的，但JS访问的COM对象依然是基于引用计数策略的。换句话说，只要在IE中涉及COM对象，就会存在循环引用的问题。如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"some_element"</span>);</span><br><span class="line"><span class="keyword">var</span> myObject = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">myObject.element = element;</span><br><span class="line">element.someObject = myObject;</span><br></pre></td></tr></table></figure>
<p>为了避免类似的问题，最好是在不使用它们的时候手工断开原生JS对象与DOM元素之间的连接。例如可以使用下面的代码消除前面例子创建的循环引用：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myObject.element = <span class="literal">null</span>;</span><br><span class="line">element.someObject = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>将变量设置为null意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存。</p>
</li>
<li><p>垃圾收集器的性能问题<br>垃圾收集器是周期性运行的，而且如果为变量分配的内存数量很可观，那么回收工作量也是相当大的。因此，确定垃圾收集的时间间隔是一个非常重要的问题。<br>IE的垃圾收集器是根据内存分配量运行的，具体一点说就是256个变量，4096个对象（或数组）字面量和数组元素（slot）或者64KB的字符串。达到上述任何一个临界值，垃圾收集器就会运行。如果一个脚本中包含那么多变量，那么该脚本很可能在其生命周期中一直保持那么多变量，这样垃圾收集器就不得不频繁运行。<br>IE7重写了垃圾收集例程：触发垃圾收集的变量分配、字面量和数组元素的临界值被调整为动态修正。IE7中的各项临界值在初始时与IE6相等。如果垃圾收集例程回收的内存分配量低于15%，则变量、字面量和数组元素的临界值就会加倍。如果例程回收了85%的内存分配量，则将各种临界值重置回默认值。这一看似简单的调整，极大地提升了IE在运行包含大量JS的页面时的性能。</p>
</li>
<li><p>管理内存<br>分配给Web浏览器的可用内存数量通常要比分配给桌面应用程序的少。主要是出于安全方面的考虑，防止运行JS的网页耗尽全部系统内存而导致系统崩溃。内存限制问题不仅回影响给变量分配内存，同时还会影响调用栈以及在一个线程中能够同时执行的语句数量。<br>优化内存占用的最佳方式是为执行中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为null来释放其引用——这个做法叫做解除引用（dereferencing）。这一做法适用于大多数全局变量和全局对象的属性。局部变量会在离开执行环境时自动被解除引用。如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> localPerson = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">     localPerson.name = name;</span><br><span class="line">     <span class="keyword">return</span> localPerson;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> globalPerson = createPerson(<span class="string">"Eric"</span>);</span><br><span class="line"><span class="comment">//手工解除引用</span></span><br><span class="line">globalPerson = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>不过，解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p><strong>基本类型值</strong>指的是那些保存在栈内存中的简单数据段，即这种值完全保存在内存中的一个位置。<br><strong>引用类型值</strong>则是指那些保存在堆内存中的对象，意思是变量中保存的实际上只是一个指针，这个指针指向内存中的另一个位置，该位置保存对象。</p>
</li>
<li><p>在将一个值赋给变量时，解析器必须确定这个值是基本类型值，还是引用类型值。<br> 五种基本数据类型（Undefined、Null、Boolean、Number、String）的值在内存中分别占有固定大小的空间，因此它们的值保存在栈内存中，这样也可以提高查询变量的速度。这些变量是按值访问的，操作的是它们实际保存的值。<br> 如果赋给变量的是一个引用类型的值，则必须在堆内存中为这个值分配空间。由于这种值的大小不固定，因此不能把它们保存到栈内存中。但内存地址的大小是固定的，因此可以把内存地址保存在栈内存中。这样可以通过保存在栈中的内存地址查找到保存在堆中的值。这种访问方式叫做按引用访问。<br>如下图所示：<br> <img src="http://7sbyks.com1.z0.glb.clouddn.com/js0401.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="《JavaScript高级程序设计》" scheme="http://chunhui.hu/tags/%E3%80%8AJavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《轻松scrum之旅——敏捷开发故事》读书笔记：相关概念]]></title>
    <link href="http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-appendix-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-appendix-reading-notes/</id>
    <published>2012-04-15T09:26:28.000Z</published>
    <updated>2015-05-02T09:27:21.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><p>Agile<br>敏捷开发。</p>
</li>
<li><p>Backlog<br>一项工作。</p>
</li>
<li><p>Build<br>指已经编译、构建好的一个可运行的软件版本。</p>
</li>
<li><p>Burndown Chart<br>用来显示当前还剩下多少工作未完成的图形化工具。通常以时间为横轴,以本 次迭代要完成的工作为纵轴。</p>
</li>
<li><p>Code Review<br>代码审核,通常由非代码编写者完成。</p>
</li>
<li><p>Daily Scrum Meeting<br>每日 Scrum 会议。每天 15 分钟的每日例会,团队中的每个成员都要回答以下 3 个问题:上次例会到现在我完成了哪些工作?下次例会前我将完成哪些工作?有没 有什么事情阻碍了我的工作?</p>
</li>
<li><p>In Progress<br>进行中。</p>
  <a id="more"></a>
</li>
<li><p>Product Backlog<br>产品功能特性列表,主要由产品责任人负责维护并定义优先级。</p>
</li>
<li><p>Product Backlog Item<br>产品功能特性列表中的条目,每个条目就是一个工作单元,其大小必须限制在团队可以在一个迭代之内完成。一个工作单元可以被分解成多个任务。</p>
</li>
<li><p>Product Owner<br>产品责任人,负责确定 Backlog 中各条目的优先级,同时解决所有关于需求的 问题。</p>
</li>
<li><p>Scrum<br>Scrum 一词来自英式橄榄球,它把软件开发团队比作橄榄球队。Scrum 是当今流 行的敏捷开发方法之一。</p>
</li>
<li><p>Scrum Master<br>负责管理每日 Scrum 流程的人,是 Product Owner 和 Team 之间的桥梁,要推动 双方的合作,负责为 Team 成员解决障碍和问题,保证他们工作的顺利进行。Scrum Master 相当于传统软件开发项目中的项目经理或主管。</p>
</li>
<li><p>Sprint<br>Sprint 代表 Scrum 的一次迭代,周期通常是 30 天,期间不能给 Team 增加额外 的需求,以确保迭代结束时能够获得预期的结果。</p>
</li>
<li><p>Sprint Planning Meeting<br>Sprint 计划会议,在一次迭代开始时召开,由 Team 与 Product Owner 一起商讨本 次迭代的目标,决定本次迭代要完成哪些工作。</p>
</li>
<li><p>Sprint Review Meeting<br>Sprint 评审会议,在一次迭代结束时召开,一般以 Demo 的形式由 Team 展示这 个迭代中完成的功能。</p>
</li>
<li><p>Sprint Retrospective Meeting<br>Sprint 回顾会议,在 Sprint 评审会议之后召开,由 Team 与 Scrum Master 共同讨 论这个迭代中哪些地方做得比较好,哪些地方需要改进,使团队持续成长。</p>
</li>
<li><p>Stakeholders<br>利益相关者,是项目成败对他们影响不大的一类人,他们参与提出产品的需求 并积极提出反馈意见。</p>
</li>
<li><p>Task<br>任务。</p>
</li>
<li><p>Team<br>跨功能的 Scrum 团队,人数限制在 3~10 人,可能包括的角色有开发人员、架 构师、测试人员、UI 设计师等,是一个自组织的团队,由团队成员自己决定如何更 好地满足用户需求,并承担相应的责任。</p>
</li>
<li><p>User Story<br>用户故事(情景),从用户的角度对系统的某个功能模块进行简短描述。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><p>Agile<br>敏捷开发。</p>
</li>
<li><p>Backlog<br>一项工作。</p>
</li>
<li><p>Build<br>指已经编译、构建好的一个可运行的软件版本。</p>
</li>
<li><p>Burndown Chart<br>用来显示当前还剩下多少工作未完成的图形化工具。通常以时间为横轴,以本 次迭代要完成的工作为纵轴。</p>
</li>
<li><p>Code Review<br>代码审核,通常由非代码编写者完成。</p>
</li>
<li><p>Daily Scrum Meeting<br>每日 Scrum 会议。每天 15 分钟的每日例会,团队中的每个成员都要回答以下 3 个问题:上次例会到现在我完成了哪些工作?下次例会前我将完成哪些工作?有没 有什么事情阻碍了我的工作?</p>
</li>
<li><p>In Progress<br>进行中。</p>]]>
    
    </summary>
    
      <category term="《轻松scrum之旅——敏捷开发故事》" scheme="http://chunhui.hu/tags/%E3%80%8A%E8%BD%BB%E6%9D%BEscrum%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%85%E4%BA%8B%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《轻松scrum之旅——敏捷开发故事》读书笔记：第8章 路在前方]]></title>
    <link href="http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-8-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-8-reading-notes/</id>
    <published>2012-04-15T09:25:37.000Z</published>
    <updated>2015-05-02T09:19:17.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>敏捷开发的核心价值观是,软件开发最重要的是给用户提 供有价值的、可以工作的软件。<br> 如何保证提供有价值的软件,是通过反馈机制来完成的。</p>
</li>
<li><p>可以工作的软件,含义就是软件是可交付给客户使用的。我们每 4 周一 个 Sprint,即迭代。在迭代结束的时候,就会产生一个可以交付给客户使用的 版本,这个版本里包含所有新增功能的实现,并且通过所有的测试。这样带 来的好处就是可以大大缩短软件开发周期,提高软件质量。并且在临近发布 的后期,我们也没有出现特别紧张的现象。每个 Sprint 即将结束时的 Sprint 评审会议可以帮助我们关注可以工作的软件,并能及时得到反馈。</p>
</li>
<li><p>在文档管理方面,我们摒弃了过去烦冗的文档管理,节省了大量的时间 和精力。需求、计划以及设计文档我们通常只保留一个一页多的版本,并且 放在 Wiki 这样的敏捷文档系统上,任何人、任何时候都可以更新它。而且, 由于文档只记录必要的信息,所以不需要再像过去那样花大量时间保持同步, 不断修改。</p>
</li>
<li><p>真正运行良 好并自我管理的团队,效率远远高于过去习惯被动地接受命令的团队。</p>
 <a id="more"></a>
</li>
<li><p>推荐一个实施 Scrum的清单列表<br> 首先是拥有一个具有优先级顺序的 Product Backlog,每个 Backlog 用 User Story 来进行描述,制定它的优先级和预估完成工作量。<br> 其次是确定团队构成,确定团队是地理分布的还是在同一个位置,最好 不要把地理位置不同的一群人算作一个团队。团队成员由开发、测试、文档 人员组成,选出一个 Scrum Master,每个团队人数最好是 3~10 人。<br> 接下来,确定每个 Sprint 的周期。根据项目情况的不同,两周到两个月 都是可以的,但最好不要超过两个月。<br> 然后,召开 Sprint 计划会议,把每个 Sprint 的要做的工作从 Product Backlog 中按照优先级顺序排序,确定需求,将任务进一步分解,如人员分工等。<br> 无论是否采用敏捷或者 Scrum,从现在开始就可以尝试每日 Scrum 会议, 每天选择固定的时间和固定的地点,15 分钟就可以了。如果选在下班前开这 个会,那么每个人陈述的 3 个问题就是:今天我做了什么?明天我打算做什 么?我遇到了哪些困难?<br> 应该从 Sprint 的第 1 天就开始准备测试用例。当 Sprint 结束时,不但功 能完成,测试也将同时结束。<br> 在每个 Sprint 结束的时候召开 Sprint 评审会议和 Sprint 回顾会议。<br> 根据团队情况,不断采用敏捷的工程实践,比如 Unit Test、Code Review、 结对编程、持续集成等。<br> 多学习别人的经验。网上有很多资源,还有很多书籍。<br> Agile 并不是银弹,它不可能解决你所有的问题。Agile 本身并不是一种软 件开发流程,而是一种理念,一组行为方法。只有真正理解了 Agile 的精髓, 才能真正 Agile。<br> You don’t do Agile, you are Agile。</p>
</li>
<li><p>如何才能非常清楚地知道一个团队采用敏捷是否成功了<br> 采用敏捷之后,软件最终的销售利润是否有所提高?软件的质量是否有 所提高?每个人对工作的满意度是否有所提高?</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>敏捷开发的核心价值观是,软件开发最重要的是给用户提 供有价值的、可以工作的软件。<br> 如何保证提供有价值的软件,是通过反馈机制来完成的。</p>
</li>
<li><p>可以工作的软件,含义就是软件是可交付给客户使用的。我们每 4 周一 个 Sprint,即迭代。在迭代结束的时候,就会产生一个可以交付给客户使用的 版本,这个版本里包含所有新增功能的实现,并且通过所有的测试。这样带 来的好处就是可以大大缩短软件开发周期,提高软件质量。并且在临近发布 的后期,我们也没有出现特别紧张的现象。每个 Sprint 即将结束时的 Sprint 评审会议可以帮助我们关注可以工作的软件,并能及时得到反馈。</p>
</li>
<li><p>在文档管理方面,我们摒弃了过去烦冗的文档管理,节省了大量的时间 和精力。需求、计划以及设计文档我们通常只保留一个一页多的版本,并且 放在 Wiki 这样的敏捷文档系统上,任何人、任何时候都可以更新它。而且, 由于文档只记录必要的信息,所以不需要再像过去那样花大量时间保持同步, 不断修改。</p>
</li>
<li><p>真正运行良 好并自我管理的团队,效率远远高于过去习惯被动地接受命令的团队。</p>]]>
    
    </summary>
    
      <category term="《轻松scrum之旅——敏捷开发故事》" scheme="http://chunhui.hu/tags/%E3%80%8A%E8%BD%BB%E6%9D%BEscrum%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%85%E4%BA%8B%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《轻松scrum之旅——敏捷开发故事》读书笔记：第7章 Sprint4—最后的冲刺]]></title>
    <link href="http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-7-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-7-reading-notes/</id>
    <published>2012-04-15T09:24:12.000Z</published>
    <updated>2015-05-02T09:16:32.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>“Sprint”的意思是快跑, 但总是快跑谁也受不了。敏捷开发最佳实践里有一条就是保持可持续的进度 (Sustainable Pace)。<br> 两个 Sprint 中间可以有额外的两天时间不算在 Sprint 里面。在这两天里,团队不用担心燃烧曲线走得够不够好,也 不用担心一些技术小尝试、小创新会耽误项目进度,Sprint 计划会议也更轻松了。</p>
</li>
<li><p>缓冲时间在两个 Sprint 之间起到了承上启下的作用。</p>
</li>
<li><p>“团队听诊器”(Team Pulse Survey)<br> 实际上是一个用 Microsoft Excel 做的问卷调查表。每个团队成员拿到表格以后,需要花几分钟时间填 写,由 Scrum Master 收集并汇总,表单会自动给出团队成绩,自动生成图表,帮助 团队迅速找到自己的问题和短板。这样,团队实施 Scrum 的总体状态就一目了然了。<br> Team Pulse Survey 的各项实际上告诉我们应该如何成为一个成熟的 Scrum 团队。<br> <img src="http://7sbyks.com1.z0.glb.clouddn.com/scrum0701.jpg" alt=""><br> <img src="http://7sbyks.com1.z0.glb.clouddn.com/scrum0702.jpg" alt=""></p>
 <a id="more"></a>
</li>
<li><p>怪不得人家 Google 这么成功,老有很酷的东西做出 来。Google 的员工周五可以不用做项目,完全自由安排,想干什么都可以,就这样,异想天开、天马行空才有可能,才能做出最棒的东西来。</p>
</li>
<li><p>按照产品整合部门可以大大提高执行效率,开发和测试在行政上属于 一个部门有利于使他们结合成一个真正的 Scrum 团队。</p>
</li>
<li><p>IBM Rational Team Concert(RTC)是第一个基于 Jazz 技术的商业产品,也是 Rational 的下一代协作软件交付平台。<br> RTC 特别适合敏捷开发团队,主要提供了 3 大块内容,分别是工作项管理(Work Items)、版本控制管理和构建管理。RTC 是基于 Eclipse 的,所以采用 Eclipse 开发 IDE 的团队使用 RTC 将是非常方便的。这样做,RTC 提供的 3 大块内容又和开发本身无缝 式地集成在了一起。<br> RTC 能够带来很大程度上的信息透明化,各种角色的用户都可以获取自己感兴趣的 信息,还可以通过 RSS 自动获取。用户可以随时了解团队开发过程中的各种动态变化: 在今天的开发任务中谁提交了新的代码?一共做了多少次构建?哪些失败,哪些成功? 到现在为止我们的迭代开发完成了多少?用户甚至可以通过制定查询条件(Query)随 时查询自己经常需要的结果。<br> RTC 的核心是基于 Work Item(工作项)的沟通协作。在过去没有一个好的工具的 时候,大量的精力都花在通过电子邮件、文档、绘制各种报告等进行沟通上了。但这些 都不能解决这样一个问题,就是所有的文档和工作依然是脱节的。而通过 Work Item 机 制,在 RTC 中,开发人员完全可以将全部的需求、代码开发、测试等内容作为工作项 的一部分进行统一管理。<br> 总之，IBM Rational Team Concert 是一个功能强大的、能够支持各种敏捷框 架的项目管理工具。</p>
</li>
<li><p>敏捷团队中需要有各种不同职 责的人,测试人员更是承担着重要的角色,他们和其他所有的团队成员一起,为产 品的最终成型负责。测试人员和开发人员不是两个对立面。咱们在一个团队中,应 该增强沟通和协作。</p>
</li>
<li><p>对于简单的 Bug,可以口头沟通交流然后马上修改，不用走记录流程,但是复杂的还是记录一下比较好。</p>
</li>
<li><p>敏捷开发定义一名好的测试人员在于他不仅能做好自己本职的测试工 作,还愿意并且能够帮助团队的其他成员解决问题,以实现团队的共同目标 为己任。在敏捷团队中,还要求测试人员在项目时间紧迫的情况下能转变职 能,完成其他角色的一些任务,达成团队的最终目标。当然,敏捷也要求开 发人员在测试任务紧要时也能转变角色去帮助完成测试任务。我想,这样的 要求无论对团队还是对团队成员都很有帮助。因为大家在职能转变的过程中, 自身的各项技能可以得到锻炼和增强,从而获得更大的发展。</p>
</li>
<li><p>性能测试也是系统测试的一种。关于系统测试的介入时机问题,常见 的做法是在第 N+1 个迭代测试第 N 个迭代的功能。</p>
</li>
<li><p>关于实习学生或者兼职员工的话题<br>首先,我们需要明确的是,兼职员工或者实习学生如果不能保证全职的 工作,那么他就最起码不可能完全参加每日 Scrum 会议,这是 Scrum 最基本 的要求,达不到的话会伤害到整个 Scrum 的过程。<br>其次,同样因为他不能保证全职的工作时间,Scrum 计划会议以及最终 的回顾会议,他都非常有可能缺席,因为这往往是一个 Sprint 的开始和结束, 而兼职人员往往觉得这些对他们不重要,这也是对团队不好的因素。<br>要知道 Scrum 的原意是打橄榄球的意思。试想一下,一个有时不 来训练的队员,或者关键时候找不到他的队员,能够对 Scrum 团队产生很好 的作用吗?肯定是不能的。<br>如果团队缺少人手的话, 建议还是寻找全职的员工,如果实在找不到具备合格素质的人才,而具有较高水平的员工不能全职工作的话,建议找一个具有基本素质的全职 的员工全身心地投入到 Scrum 中来,作为那个具有比较高技术水平的员工的“影子员工”,并且让那个具有比较高的技术水平的人才作为技术支持,即幕 后人员,而这个幕后人员可以由其他部门来管理。</p>
</li>
<li><p>ISO9001 以及 CMM 或者 CMMI,这些都是比较接近或 者类似的软件管理模型方法,而这些方法相对于 Scrum 这种敏捷的软件开发 管理方式而言,还是有比较大的差别的。比如,CMM 等强调过程的可观测 性,Agile 则强调可观测的结果(可运行软件),CMM 等方法比较强调文档, 而 Agile 方法却不是那么在乎文档等。<br>总体而言,CMM/CMMI 与 Agile 是两种不同的软件研发管理和过程体 系,前者比较重量级,后者更为轻量一些。Agile 包含了更多具体、实用的软 件工程技术方法,而 CMM/CMMI 提供了更多以数学统计为基础的过程管理 和质量控制技术方法。但是这并不是说 Scrum 在一个 CMM 管理的企业中一 定会带来冲突。<br>我认为,合理、恰当的结合运用 Scrum 以及 CMM 的一些管理理念是不 会有太大问题的。因为在很多软件过程中,使用 Scrum 能够在一些专门的领 域大大减少工作量,比如修改 Bug、软件设计等方面。也就是说,可以在大 的、更为宏观的层面上使用 CMM 来控制质量和管理流程,而在一些小团队 的具体分工中采取 Scrum 这样的敏捷方法。<br>所以,从总体上说,在实施层面上 Scrum 与 CMM/CMMI 应该是兼容的。 但是从价值观来看,敏捷和 CMM/CMMI 又是冲突的。CMMI 的价值观￼是过程重于人,文档重于可运行的软件。敏捷则正好相反。敏捷是要消除一 切阻碍创造价值的浪费。而在 CMMI 的大量关键过程域中,只有很少的东 西和开发有关,大多数 CMMI 的实施都会带来很大的浪费。另一方面, CMM/CMMI 不关心团队协作,不关心是否能招到合适的人,更不关心你的 代码是否应该重构⋯⋯</p>
</li>
<li><p>两个人也是可以组成一个 Scrum 团队的。</p>
</li>
<li><p>Scrum 要求在一个 Sprint 中团队成员高度稳定。</p>
</li>
<li><p>我们是为了 我们的客户在做事情,客户永远是上帝,任何时候客户都要摆在很重要的位 置上来考虑。让他们参与到 Scrum 中来,不代表我们要把所有信息都透露给 客户,毕竟有些内容,尤其是技术上的内容,是公司的核心机密,是不能透 露出去的。而客户事实上也不关心这个,他们只关注他们能得到什么。所以 无论是在 Scrum 计划会议,还是在评审会议的时候,如果客户在场,就一定 要让他们有充分了解产品的权利。他们应该知道这个产品的功能,当然我们 也应该告诉他们产品目前存在的问题。不隐瞒问题才是对客户的尊重。<br>更需要担心的是如何与客户打交 道,沟通产品功能。因为客户的素质往往千差万别,敏捷的软件方法又有如 此高的动态性,客户也许会提出很多临时性的、很特殊化的要求。在这些时 候,作为团队的领导,应该分辨出哪些是真正存在的需求,哪些不是。</p>
</li>
<li><p>在生活中,敏捷可以无处不在,Scrum 其实蕴 含着先进的管理思想。</p>
</li>
<li><p>第 一是要大大增加构建的频率,这样问题才能尽早暴露,最好做一个持续集成系统, 这是敏捷开发里非常重要的一点。<br>第二是要解决本地环境和正式构建系统不一致的 问题,很多时候我们在本地开发环境构建时也许是好的,可是一到了正式的构建系 统,问题就暴露出来了,这有可能是我们的疏忽,忘记提交某些代码,本地有、构 建服务器上没有,也可能真的是本地环境的问题,因为本地环境可能和服务器环境 不一致,所以,最好每个人都能到实际的构建服务器上测一测再提交。</p>
</li>
<li><p>持续集成是敏捷开发中核心的工程实践,它是敏捷产出“可以工作的 软件”(Working Software)的有利保障。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>“Sprint”的意思是快跑, 但总是快跑谁也受不了。敏捷开发最佳实践里有一条就是保持可持续的进度 (Sustainable Pace)。<br> 两个 Sprint 中间可以有额外的两天时间不算在 Sprint 里面。在这两天里,团队不用担心燃烧曲线走得够不够好,也 不用担心一些技术小尝试、小创新会耽误项目进度,Sprint 计划会议也更轻松了。</p>
</li>
<li><p>缓冲时间在两个 Sprint 之间起到了承上启下的作用。</p>
</li>
<li><p>“团队听诊器”(Team Pulse Survey)<br> 实际上是一个用 Microsoft Excel 做的问卷调查表。每个团队成员拿到表格以后,需要花几分钟时间填 写,由 Scrum Master 收集并汇总,表单会自动给出团队成绩,自动生成图表,帮助 团队迅速找到自己的问题和短板。这样,团队实施 Scrum 的总体状态就一目了然了。<br> Team Pulse Survey 的各项实际上告诉我们应该如何成为一个成熟的 Scrum 团队。<br> <img src="http://7sbyks.com1.z0.glb.clouddn.com/scrum0701.jpg" alt=""><br> <img src="http://7sbyks.com1.z0.glb.clouddn.com/scrum0702.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="《轻松scrum之旅——敏捷开发故事》" scheme="http://chunhui.hu/tags/%E3%80%8A%E8%BD%BB%E6%9D%BEscrum%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%85%E4%BA%8B%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《轻松scrum之旅——敏捷开发故事》读书笔记：第6章 Sprint3—深入Scrum]]></title>
    <link href="http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-6-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-6-reading-notes/</id>
    <published>2012-04-15T09:23:06.000Z</published>
    <updated>2015-05-02T09:10:48.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>敏捷强调面对面的沟通,创造一个有利于敏捷沟通的工作环境至关重 要。</p>
</li>
<li><p>避免不必要的浪费是精益软件开发的思想,也同时是敏捷开发所倡 导的。Sprint 计划会议还要确定 Sprint 最后演示的时间和每个 Story 演示 的方式。</p>
</li>
<li><p>Sprint 计划会议的目标:制定一个 Sprint Goal(目标)和进行任务分解。<br> 把每个 Story 分解成若干个 Task,并且估算出大致的完成时间。</p>
</li>
<li><p>制定一个一两句话的 Sprint Goal 是 Scrum 倡导的,这其实就相当于标语和口号, 但是区别在于标语和口号通常比较虚,然而 Sprint Goal 必须是实实在在的,这样整 个团队才可以清晰地知道 Sprint 里最重要的是什么。比如：“完成电子商务通集成接口,满足 第三方系统与电子商务通集成的需求”。<br> Sprint Goal 是个鼓舞士气的好工具。</p>
</li>
<li><p>Sprint 计划会议的时间拖得再长也难有好的结果,应该果断 结束。在 Sprint 计划会议召开之前应该有所准备。</p>
</li>
<li><p>建议团队最好有一个人能在 Sprint 开始前的几天就 提前进行一些准备,这样整个团队就可以顺利地过渡到新的 Sprint 中。Sprint 计划会议主要是为了制定 Sprint Goal 和 Sprint 计划,具体开多长时间,要以 最终达成目标为准。但是如果事先大家谁都没有准备,那么这个会议开多长￼时间也是没有效果的,只能是浪费时间。任何会议都需要准备,更何况像 Sprint 计划会议这么重要的会议。</p>
 <a id="more"></a>
</li>
<li><p>在做计划的时候,任何需求不明确的任务 都要及时向产品负责人提出来。</p>
</li>
<li><p>在没有详细计划的情况下可不可以开始一个 Sprint。当然可 以,但是你不能没有任何计划。Scrum 的价值观就是未来是不可详细预知的, 也就是说你不可能做出详细的计划。不过只要有计划,并且这个计划足够支 持团队开始有效且有序的工作的时候,就完全可以开始一个 Sprint,然后再不 断完善计划就可以了。</p>
</li>
<li><p>如果开发任务很紧,大量频繁的沟通会不会 影响开发效率?情况应该不会太坏,良好的沟通会大量避免今 后的麻烦,反而能节省总体时间。再说,这总比“少量的沟通 + 大量的文档”要强 得多。</p>
</li>
<li><p>在 Scrum 中,实际上要求 Scrum 团队是跨职能的。一个 Scrum 团队 应该包含开发人员、测试人员、美工及文档人员。敏捷的开发流程迫切需 要一个跨职能的团队。</p>
</li>
<li><p>结对编程对于团队成员间技能的互相学习很有帮助。</p>
</li>
<li><p>“结对编程”的经典画面：两个人一起讨论, 相互交替着编码,虽然同时只有一个人在编码,不过另外一个人也会在一旁指导, 同时也可以重新审视已完成代码的逻辑和算法,使代码评审的工作在编码阶段就已 经完成。从某种意义上说,这样做实际上会节省不少的时间,并且能提高效率。</p>
</li>
<li><p>结对编程的阻力在于人,没有尝到结对编程的好处之前对其不理解是 正常的。</p>
</li>
<li><p>ECF 的全称是 Eclipse Communication Framework,是一个基于 Eclipse 的协同工 作框架,它让开发人员在开发产品时,相互间可以及时地沟通和交流。而最新的消息是, 有爱好者开发出了可以在 ECF 上共享同一个编辑器的插件。也就是说,两个人可以同 时编辑一个文档,其中任何一个人的修改另外一个人都能实时捕获到,就如同是在面对 自己桌面一样。</p>
</li>
<li><p>对于配置环境、安装工作软件 之类的工作,我们也是需要区别对待的。简单点说,如果对于简单的软件安 装,几分钟或者几十分钟之内能搞定的,我们当然可以不用再单独创建 Story 了。但是,对于事前就知道至少需要在这上面花费几个小时的工作,我们一定要事先做好计划。这里的计划可不仅仅是估计时间和分配人员这么简单了, 要考虑需要的问题很多。<br>需要强调的是,一定要把 配置过程中出现的问题和正常的步骤记录下来作为以后工作的指导,这样即 便服务器管理员更换了,我们也不会手忙脚乱的。<br>对于时间的评估,如果你们是第 1 次做的话,评估起来会比较困难。这 时候,我的建议是可以去请教有过相关经验的人,他们会告诉你他们会用多 少时间,而你需要做的就是在这个基础上增加一些缓冲,毕竟他们是“熟练 工”嘛。</p>
</li>
<li><p>工欲善其事,必先利其器。其实帮助敏捷开发的小工具有很多,遇到 问题不妨 Google 一下。</p>
</li>
<li><p>敏捷本质上也是一种先进的管理思想。</p>
</li>
<li><p>将投资和回报最大化,快速反映市场的风云变换,敏捷开发是应对危机 的最好武器。</p>
</li>
<li><p>面对面的沟通是最有效的方式。在一个异地开发项目的初期,核心人 员进行面对面的接触是非常有必要的,尽管费用会增加一些,但是从长期 效果来看,这样会节省很多的沟通成本。</p>
</li>
<li><p>Sprint 回顾会议,顾名思义,是为了在 Sprint 刚刚结束的时候及时总结这 个 Sprint 中的得与失,使团队在各方面持续成长。这就像一次比赛,在中场 休息的时候,教练为队员们指出比赛中的亮点和不足,让他们在接下来的比 赛中能更好地发挥。这跟 Sprint 评审会议有本质上的不同。</p>
</li>
<li><p>在项目开发过程中,有一个原则是,问题被发现和处理得越早,付出的代 价就越小。但问题是我们在紧张的开发任务中有时候很难发现这些错误,更意 识不到这些错误会带来的严重影响。Sprint 回顾会议就为团队提供了集中发现 和解决问题的好机会。</p>
</li>
<li><p>在 Sprint 回顾会议上应该注意的几点是:<br>第一,不要流于形式。如果把 Sprint 回顾会议开成一个没有主题的漫无 目的的讨论会,则既浪费时间,又没有效果。同时也要注意不要把它开成一 个批判大会。Sprint 回顾会议的最终目的是学习,而不是绩效考核。<br>第二,总结出经验和教训只是第一步,如果只有总结没有行动,那么总 结出来的东西最终只能是废话一堆。所以在 Sprint 回顾会议上发现问题之后, Scrum Master 应该督促团队在下一个 Sprint 中吸取教训,持续改进。</p>
</li>
<li><p>敏捷开发中如何做测试<br>各种敏捷开发方法都强调 TDD(Test Driven Develop),就是所谓的“测 试驱动开发”,这主要是针对开发流程来说的。它要求开发团队在开始开发一 个模块或功能之前,要先写好针对这个功能或模块的测试用例,然后再编写 代码,并保证代码能通过这些测试。这种方式能有效地提高开发人员的代码 质量,同时也能提高测试工作的效率。<br>而 Scrum 还强调 Scrum 团队的组成人员应该是跨职能的,也就是将开发 人员、测试人员和其他职能的人员组成一个团队,形成一个整体。测试人员￼加入到 Scrum 团队中来,通过参与 Scrum 实施的各种环节,比如 Sprint 计划 会议、每日 Scrum 会议等,他们可以深入了解产品的各项功能和需求,了解 开发人员到底在做什么、怎么做;他们可以在开发人员测试的薄弱环节投入 更多的精力,比如开发人员主要做单元测试,这样就不太容易测试 UI 界面, 那么测试人员就可以花费更多的努力在表现层的测试上。</p>
</li>
<li><p>真正的 Scrum Master 要能够排除开发人员和产品负责 人之间的障碍、确保 Scrum 达成目标、实现投资回报最大化、确保团队进 度、确保团队状态具有高度的可视性、激发团队创造力、提高团队开发水 平、采用各种优秀的工程实践、提高生产力等。</p>
</li>
<li><p>代码重构的工作实际上是很细节,但又很影响全局的工作。做得好能为产品功 能增色不少,并且提高代码的质量,增加代码的可读性;做得不好就有可能导致程 序出错,失去功能性,产生新的问题。<br>因此在做重构的时候一定要同时进行 Code Review。</p>
</li>
<li><p>重构工作也不能追求过分的完美,毕竟交付时 间在那摆着,软件的可用性还是第一位的。</p>
</li>
<li><p>敏捷提倡的是以团队绩效取代个人绩效,当然这有点绝对,其实 可以以团队的分数作为平均分,然后再给每个团队成员评分。这样,就既有团队绩效,又包含个人绩效了。</p>
</li>
<li><p>Scrum Master 在绩效评价这件事情上的角色是起至关重要的作用的。只 有 Scrum Master 才充分地了解每个团队成员到底做了什么、做得怎么样、进 步大不大等,经理可能只能掌握个大概,所以由 Scrum Master 来评价是合适 的。不过一般还是建议由经理来主导评价这个事情,然后 Scrum Master 给一 定的客观的反馈意见。<br>注意,是“一定的”,也就是说,Scrum Master 只需要给出一个大概的反 馈就可以了。</p>
</li>
<li><p>实际上这个问题是一个风险/回报模 型的问题,也可以说是投资回报率(Return On Investment,ROI)的问题。我们应该 采取什么的措施?这个措施有什么样的风险?这个措施有什么样的价值?需要投入 多大的力气?最终我们来选取一个最好的方案,或者我们自己不做决策,而是把这 些备选方案提供给客户或者领导。让他们来做决定会比较好。</p>
</li>
<li><p>不能向客户隐瞒产品的缺陷或者问题, 客户在敏捷开发中也是成员之一。有必要让客户在开发前期就参与进来,这样能让产品更加接近客户的需要,并且能做到及时的沟通,那样的话就不会出现大家都很被动的情况了。</p>
</li>
<li><p>Scrum 的可视性能够保证及时发现问题。不要隐瞒风险。要用非技术 语言给客户提供足够的信息以便他们提前做出决策。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>敏捷强调面对面的沟通,创造一个有利于敏捷沟通的工作环境至关重 要。</p>
</li>
<li><p>避免不必要的浪费是精益软件开发的思想,也同时是敏捷开发所倡 导的。Sprint 计划会议还要确定 Sprint 最后演示的时间和每个 Story 演示 的方式。</p>
</li>
<li><p>Sprint 计划会议的目标:制定一个 Sprint Goal(目标)和进行任务分解。<br> 把每个 Story 分解成若干个 Task,并且估算出大致的完成时间。</p>
</li>
<li><p>制定一个一两句话的 Sprint Goal 是 Scrum 倡导的,这其实就相当于标语和口号, 但是区别在于标语和口号通常比较虚,然而 Sprint Goal 必须是实实在在的,这样整 个团队才可以清晰地知道 Sprint 里最重要的是什么。比如：“完成电子商务通集成接口,满足 第三方系统与电子商务通集成的需求”。<br> Sprint Goal 是个鼓舞士气的好工具。</p>
</li>
<li><p>Sprint 计划会议的时间拖得再长也难有好的结果,应该果断 结束。在 Sprint 计划会议召开之前应该有所准备。</p>
</li>
<li><p>建议团队最好有一个人能在 Sprint 开始前的几天就 提前进行一些准备,这样整个团队就可以顺利地过渡到新的 Sprint 中。Sprint 计划会议主要是为了制定 Sprint Goal 和 Sprint 计划,具体开多长时间,要以 最终达成目标为准。但是如果事先大家谁都没有准备,那么这个会议开多长￼时间也是没有效果的,只能是浪费时间。任何会议都需要准备,更何况像 Sprint 计划会议这么重要的会议。</p>]]>
    
    </summary>
    
      <category term="《轻松scrum之旅——敏捷开发故事》" scheme="http://chunhui.hu/tags/%E3%80%8A%E8%BD%BB%E6%9D%BEscrum%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%85%E4%BA%8B%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《轻松scrum之旅——敏捷开发故事》读书笔记：第5章 Sprint2—计划与变化]]></title>
    <link href="http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-5-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-5-reading-notes/</id>
    <published>2012-04-15T09:22:18.000Z</published>
    <updated>2015-05-02T09:06:12.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>不要隐瞒团队的技术实力,否则很难做切合实际的计划和评估。</p>
</li>
<li><p>Wiki 是个不错的敏捷项目文档管理工具。</p>
</li>
<li><p>善于寻求帮助是个好习惯,不仅仅是针对敏捷开发项目。</p>
</li>
<li><p>敏捷开发就 是需要不断实践,每个团队遇到的问题都不会完全一样,你需要不断思考。</p>
</li>
<li><p>要时刻记住,在敏捷的理念里面,一直都在反复强调自我管理的 团队,要淡化层级观念。Sprint 任务的选择,主要决定权属于团队。需求都是 从 Stakeholder 那里来的,而 Stakeholder 包括了你们的客户,你们的管理层, 还有你们自己。Product Owner 有权维护产品 Blacklog,而 Scrum 团队有权从 产品 Backlog 中选择适当的任务作为 Sprint Backlog。所以,由 Product Owner 一个人完全主导是不对的,你们应该参与到讨论需求和计划的活动中。</p>
</li>
<li><p>最好是在上 午与 Product Owner 开完第一阶段的计划会议后,紧接着召开第二阶段的会 议。当然,灵活一点的话,你也可以在下午和团队成员一起消化一下第一阶 段会议的任务安排,然后接着召开第二阶段的会议,这样任务就能够及时地下达并明确下来。<br> 由于这两个阶段的会议中间有周末的两天时间,打断了连 续性,所以应该不是一个正确的实践方法。建议开计划会议最好连 着开,压缩一下第一阶段的会议时间。</p>
 <a id="more"></a>
</li>
<li><p>至于选择 Story 的主导性问题,由 Product Owner 主导是没有问题的。但 是你和你的团队应该充分地提出意见和看法,以确保自己的任务合适,并能 够在预期时间内完成。</p>
</li>
<li><p>在 Scrum 中,产品要完成的功能清单叫做产品 Backlog。每一个 Backlog 项通常也叫 Story,因为它是由 User Story 来描述的,一个 Story 是由一个完整的 User Story 来描述的。有时候,一个比较复杂的 Story 也可以分解若干个成更小的 Story。 Task 是任务,在具体实现每个 Story 的时候都要将其分解成具体的任务, 比如编码、测试、调研、Code Review 等,这些都是 Task,而不能称为 Story。</p>
</li>
<li><p>计划扑克（Planning Poker）<br> 所谓“计划扑克”(Planning Poker)是一种标有各种数字的扑克牌。参加游戏的 人每人各拿一叠扑克牌,牌上有不同的数字。<br> 客户或者产品责任人为大家挑选 1 个 Story(Backlog),并简单解释其功能,以供 大家讨论。<br>每个游戏参加者按自己的理解来估计完成这个 Story 所需的时间,从自己手中的牌 里选 1 张合适数字的牌,并发给大家看。游戏参加者各自解释选择这个数字的原因,尤 其是数字最大和最小的人。<br> 根据每个游戏参加者的解释,重新估计时间并再次出牌,直到大家的估计值比较平 均为止。<br> 在这个游戏中需要注意的是:首先,这不像普通的扑克游戏,不是轮流出牌,而是 大家考虑好之后同时出牌,这样就可以避免后出牌的人被先出牌的人干扰;其次,要告 诉团队成员,他们需要估计所有的 Story,而不仅仅是他们自己将要做的那些部分,比 如测试人员不能只估计测试工作所需要的时间。<br> 计划扑克不同于普通的扑克牌,每张牌的分值分别为 1、2、5、7、10、20 和 100。</p>
</li>
<li><p>扑克牌的想法很好,可是在实际操作中,当谁也说服不了谁的 时候,大家更喜欢用少数服从多数的方法作出决策,但事实往往是真理掌握在少数 人手里,这些人在少数服从多数的情况下没有机会表达自己。<br>在 Sprint Planning 中,扑克牌游戏的目的就是让掌握真理的少数人有机会表达 自己,说服大家,避免团队独裁或出现不理性的决策。<br>我们经常会发现时间不够用,尤其是在争论比较多的时候。所以 Scrum Master 一定要控制好时间,避免偏离方向的争论。如果真的时间不够用,也不要应付了事, 可以另找时间讨论。但建议最好不要这样。</p>
</li>
<li><p>开发过程中类似升级机器这样杂七杂八的事情还有很多，有些就可以算在计划预留的缓冲里面。</p>
</li>
<li><p>小公司其实是更容易采用 Agile 的流程的。10 个人的团队,最好划分 为 2 个左右的小组。每个 Scrum 团队,我认为 4~10 个人比较合适, 但是 5 个人左右是最有效率的。当然,大公司、大团队也同样可以用 Scrum,只是需要把大团队分解成一个个不超过 10 个人的小团队。</p>
</li>
<li><p>首先要理清 Scrum 与其他敏捷方法 的着重点的不同之处。要知道,Scrum 看重的是敏捷项目管理上的实践,着 重点在于管理,比如如何计划、如何迭代、怎样评估进度、在什么时候遵循 怎样的规则开什么样的会等,它仅仅是一个框架,没有过多地关注具体的工 程实践,也就是说,它与 XP 这样的具体的软件开发实践关注的重点不同。 Scrum 没有教我们怎样进行结对编程、怎样做 TDD 等,而 XP 在做这些工作。 可以简单地认为,Scrum 的概念更宏观一些,而 XP 则更关注微观。</p>
</li>
<li><p>一些具体方法的使用讨论<br>(1)单元测试:单元测试在现代软件开发的流程中基本上属于不可缺少 的一环,敏捷性质的软件开发更是如此。在 Scrum 管理的软件开发项目中, 单元测试的使用与否与 Scrum 无关。但是从软件开发质量的角度和 Scrum 管 理软件开发的成效来看,建议要多多使用单元测试,不要轻视它。<br>(2)TDD:主要是 XP 在提倡它。在一个 Scrum 管理的软件开发项目中,使不使用 XP 的实践 方法,包括 TDD,完全是由你们的软件开发项目所决定的。</p>
</li>
<li><p>虽然是在采用 Scrum,但更重要的是在接受 敏捷开发的思想来指导项目开发。敏捷最忌讳的就是教条,凡事都按照条条 框框来进行。使用Scrum绝对不要认为 Scrum 概念之外的实践就不 用理睬。一切好的实践,如果符合团队的需要、对团队有帮助,就可以采用。</p>
</li>
<li><p>开发过程中如果团队成员有临时的休假计划，那么 Sprint 的计划则有可能完 不成。可以跟 Product Owner 事后商量,看能不能移走一些任务,或者在这个 Sprint 结束之后,再将未完成的工作挪到下个 Sprint 或者 Product Backlog 中。但是一定要保证不要破坏每个功能组件,要保证软件的可用 性。还记得结束一个 Sprint 的标志吗?就是保证要拿出一个真正可以给用户 使用的软件来。</p>
</li>
<li><p>机械地实施敏捷是一开始比较容易犯的错误。敏捷并不是一种过程。</p>
</li>
<li><p>每个工作周最出成果的是中间的两三天。</p>
</li>
<li><p>Scrum 是一个 Agile 流程,Agile 注重的是项目中的动态变化,拥 抱这些变化。每日 Scrum 会议能够让我们及时发现项目中的变化。如果扩展到两天开一次这样的会议,虽然在项目前期看来可能很好, 但是项目进行得越深入,问题就会越多,两天一次积累的问题也会比 较多。所以我认为每天开一次会议是比较好的,大家容易把握方向, 也利于掌握进度,应对实时的、经常的变化。</p>
</li>
<li><p>燃烧曲线是衡量团队进度的重要工具。但是不要过分依赖它作为监督 和考核的依据,否则就会变味。因为团队会把重点放在生成漂亮的曲线上, 而不是项目本身。</p>
</li>
<li><p>Scrum Master 要有敏锐的“嗅觉”,及时发现团队成员遇到的问题。</p>
</li>
<li><p>开发过程中容易忽略一些在敏捷软件开发、甚至是一般软件开发 中的基本要素。比如代码复审(Code Review)或者结对编程(Pair Programming)这样的敏捷方法。这两 种机制至少能够保证团队成员在某个软件功能方面不至于只有唯一的一个人 了解。结对编程能保证两个人对代码的熟悉程度基本上是一样的,而代码复 审机制则能保证团队全体成员都对代码有一定程度的熟悉。可以开一些代 码复审的小会议,要求所有人参与,不管团队成员中的人跟这块功能有没有 关系,最好都把他们拖进来,这样有问题也能及时发现。这样,即使团队 组织结构发生了变化,也不会对项目开发产生太大的影响。</p>
</li>
<li><p>在计划整个 Scrum 的 Backlog 的时候,首先一定要对未曾 预料到的中途出现的事情有所预防。简单地说,就是要留出一定的时间来处 理这些异常事件。但事实上, 这样的时间是不能随随便便估计的,必须要按照每次 Scrum 的经验来量化地 估计。当然,你们也只是刚开始,所以以后你们对这样的事情肯定会更有经 验。另外,如果突发事件需要花费团队成员大量的精力,那最好还是拒绝, 以保证 Sprint 的正常进行。如果这件事足够重要,有很高的优先级,那么可 以放到下一个 Sprint 的 Backlog 里面。</p>
</li>
<li><p>作为 Scrum Master,需要协调好开发团队与经理之间的关系。<br>如果在使用 ScrumWorks,第一,你可以为你的经 理在 ScrumWorks 上建立一个类似观察者身份的账号,那么他就可以随时随 地掌握整个产品以及当前 Sprint 的进展情况,也就可以实时观察 Burndown Chart 的变化,这样他就不需要太频繁地参与会议,提出一些干扰 Scrum 进行 的建议和批评了。第二,我想很重要的是,或许你的经理觉得仅仅拿到一个 账号来查看那些枯燥无味的数据是没有太大意义的,那么我认为你可以每隔 几天给经理发一份当前工作的简报,在简报上面你可以采用一些图表,比如 饼图、柱状图,来多方位、多角度、更加全面地体现当前工作的进展,这种 展现方式,可以认为是对 ScrumWorks 的 Burndown Chart 的一个极大的补充。 这样的话,你的经理应该会满意很多。<br>￼    做到了这两点,我想你的经理在掌握了这么多的团队工作信息,了解了 你们的任务有多重之后,就自然不会给你们的团队成员安排太多的所谓“杂 事”了。这样的话,你们将会有更多的时间完成 Scrum 任务,也能更高质量 地完成自己的代码工作。这也是相得益彰,两全其美的方法</p>
</li>
<li><p>在 Scrum 中,不实际参与项目开发的一些管理者是“鸡”,而全身心投入的项目团 队成员是“猪”。</p>
</li>
<li><p>首先搜集当前每个 Task 的估计时间、已完成时间、每个 Task 从开 始到完成所用的实际天数等信息,然后利用 Excel 自带的图表功能绘制了几个图表, 比如每个团队成员工作量的对比、每个团队成员工作效率的对比、每周的进展速度 等。可以让scrum master自己看了都觉得对当前的工作进展 有了新的认识。<br>注：如果觉得这种报告比较麻烦,只使用项目管理工具提供的报告功能就 足够了。</p>
</li>
<li><p>如果最后一个story完成不了，那么保证前 3 个 Story 的完成是个正确的决定。敏捷开发可以使 项目具有高度的可视性,并能够及时发现问题。</p>
</li>
<li><p>Agile 原则上是不支持加班的。因为敏捷的软件开发不是一直以冲刺的力 量跑,也不是动不动就像抽了筋似地一阵猛跑,而且敏捷要求团队成员的密 切合作,所以大家的速率必须基本保持一致,才能使整个项目有序地顺利向 前推进。加班对于团队成员的工作效率来说也是一把双刃剑,今天晚上加了 班,提高了工作的产出,然而你第二天白天就可能会由于昨天工作太晚没有 休息好导而致效率低下,加总起来,可能还不如不加班的效率高。长期加班 对整个团队的士气和战斗力都是一种极大的摧残。</p>
</li>
<li><p>加班产生的源头,其一是计划不充分、失准、中途有或大或小的变化等。 而 Scrum 的流程、每日 Scrum 会议、Scrum 计划会议、短的迭代周期,这些 无一不是为了克服传统软件开发中的弱点的。传统软件开发中的弱点主要有 流程无序、管理困难、难以变更、难以拥抱变化等。造成加班的另一个原因 可能是不好的习惯或观念,认为只有加班才能体现对工作的热情,这是非常 幼稚的。殊不知,对一个人来讲,工作和生活如果不能平衡,时间长了一定 会出问题。敏捷开发是以人为本的,对于团队,如果人出了问题,那项目失 败的可能性就会大大增加。对每个人来讲,如果出了问题,他的职业生涯又 将如何在一个倡导敏捷的时代有所发展呢?</p>
</li>
<li><p>零星的加班无法避免，长时间的加班是完全不能被Scrum所接受的。当然,到了项目的尾声,在可以预计的情况下,如 果加班能够完成剩余的工作量,不加班则有困难的时候,也可以酌情考 虑。但是从原则上讲,不应该提倡加班。以后随着计划越做越 好,随时都能拥抱变化,随时都能与 Product Owner、项目投资人进行密切联 系的话,这种问题就不再是问题了。</p>
</li>
<li><p>Sprint 评审会议实际上是个非正式的会议,但可以邀请高层参加。会 议的气氛可以活跃一点,避免变成严肃的报告会。Sprint 评审会议上要避 免过多地谈论技术细节,而是要重点关注最后的成果。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>不要隐瞒团队的技术实力,否则很难做切合实际的计划和评估。</p>
</li>
<li><p>Wiki 是个不错的敏捷项目文档管理工具。</p>
</li>
<li><p>善于寻求帮助是个好习惯,不仅仅是针对敏捷开发项目。</p>
</li>
<li><p>敏捷开发就 是需要不断实践,每个团队遇到的问题都不会完全一样,你需要不断思考。</p>
</li>
<li><p>要时刻记住,在敏捷的理念里面,一直都在反复强调自我管理的 团队,要淡化层级观念。Sprint 任务的选择,主要决定权属于团队。需求都是 从 Stakeholder 那里来的,而 Stakeholder 包括了你们的客户,你们的管理层, 还有你们自己。Product Owner 有权维护产品 Blacklog,而 Scrum 团队有权从 产品 Backlog 中选择适当的任务作为 Sprint Backlog。所以,由 Product Owner 一个人完全主导是不对的,你们应该参与到讨论需求和计划的活动中。</p>
</li>
<li><p>最好是在上 午与 Product Owner 开完第一阶段的计划会议后,紧接着召开第二阶段的会 议。当然,灵活一点的话,你也可以在下午和团队成员一起消化一下第一阶 段会议的任务安排,然后接着召开第二阶段的会议,这样任务就能够及时地下达并明确下来。<br> 由于这两个阶段的会议中间有周末的两天时间,打断了连 续性,所以应该不是一个正确的实践方法。建议开计划会议最好连 着开,压缩一下第一阶段的会议时间。</p>]]>
    
    </summary>
    
      <category term="《轻松scrum之旅——敏捷开发故事》" scheme="http://chunhui.hu/tags/%E3%80%8A%E8%BD%BB%E6%9D%BEscrum%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%85%E4%BA%8B%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《轻松scrum之旅——敏捷开发故事》读书笔记：第4章 Sprint1—激动人心的Scrum之旅第一站]]></title>
    <link href="http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-4-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-4-reading-notes/</id>
    <published>2012-04-15T09:21:08.000Z</published>
    <updated>2015-05-02T10:23:47.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>如果真的遇到一个特别大的Story，应该适当地将Story分解。</p>
</li>
<li><p>Sprint计划（Sprint Planning）<br> 在每个 Sprint 开始之前,需要召开 Sprint 计划会议,会议时间一般为 4~8 小时, 参加人员有产品责任人、Scrum Master、Scrum 团队和其他感兴趣的人,比如管理层 人员和客户代表。Product Owner 从产品 Backlog 中挑选高优先级的任务,并与 Scrum 团队一起决定在这个 Sprint 中需要完成多少功能。Scrum 团队将这些任务分解成小的功 能模块。Scrum 团队成员详细讨论如何能按需求完成这些功能模块,并估计完成每个功 能模块所需的大概时间。</p>
</li>
<li><p>当我们进入一个新的领域或者开始一些从未涉及过的工作时，感觉无从下手是很正常的。好的处理方式是打一颗照明弹，尽可能地往远处打，说不定就能发现我们正在走的路是否能通往我们的目标。同时，对于路上的困难，也会有一个感性的认识。<br> 敏捷开发的价值观认为计划是不可能精确估计的。这也是习惯了传统流程的人再转到敏捷开发时会不太适应的地方。但是制定一个粗略的计划反而更符合实际，它可以帮助我们把重点放在更有价值的事情上。</p>
</li>
<li><p>在混乱中建立秩序是Sprint开始阶段的目标。</p>
 <a id="more"></a>
</li>
<li><p>买土豆的故事<br> 故事里的成功 者居然只是通过老板的一句话,就替老板假设了那么多的情况,而且所有的假设都 没有得到老板的反馈意见,就直接替老板决定了,这岂不是很危险的事?但是你可 能会说,总不能每次遇到需要抉择的时候都去找老板请示吧。是的,我们当然不能 这样。所以呢,我们要在事情没做之前,从老板那里收集到尽量多的信息,例如买 土豆是要做什么啊、要买多少啊。这样我们才能够迈出坚实的第一步。</p>
</li>
<li><p>敏捷开发倡导面对面的交流。可以工作的软件胜过面面俱到的文档。</p>
</li>
<li><p>敏捷和 Scrum 倡导团队自我管理,在任务分配上提倡每个人按兴趣和 能力自主选择任务。</p>
</li>
<li><p>每日 Scrum 会议（Daily Scrum）<br> 每日 Scrum 会议(Daily Scrum),即团队每日例会,条件允许的话,每天都应该在 同样的时间和地点,组织所有成员站立举行。由于是以站立的状态开会, 因此时间比较短,一般为 15 分钟左右。这个会议最好是在每天的早晨开,有利于团队 成员们安排好当天的工作计划。只有团队成员可以在每日 Scrum 会议上发言,其他人 员如果对项目进度有兴趣也可以参加,但只能旁听而不能发言。<br> 会议由 Scrum Master 主持,Scrum 团队的所有成员轮流回答以下 3 个问题。<br> (1)昨天我完成了什么工作?<br> (2)今天我打算做什么?<br> (3)我遇到了什么障碍?<br> 通过每日 Scrum 会议,团队成员之间可以彼此相互熟悉工作内容,充分了解项目 进度,相互帮助解决问题。Scrum Master 除了倾听团队成员的发言外,还有责任设法 解决团队成员在会上提出的困难,尽快扫除阻碍他们工作顺利进行的障碍。即使有的问 题 Scrum Master 没有能力解决,例如某些技术细节问题等,他也应该找到团队中或其 他团队的成员来帮助快速地解决问题。另外,还有两点需要注意的地方:其一,这是团 队成员之间的交流,也是相互的承诺,并不是用来向老板汇报工作进度的;其二,这也 不是一个专门用于解决各种问题的会议,团队成员们遇到的问题可以在会上提出来,而 有能力解决这些问题的人可以在会后帮助他们解决问题。</p>
</li>
<li><p>每日 Scrum 会议是 Scrum 的精髓,最简单又最复杂,如何更有效地召 开,需要不断地改进和摸索。</p>
</li>
<li><p>总以为可以做到最好、 最细致,把一切都考虑在内,反倒是出了大纰漏,居然忘了“万丈高楼平地起”,没有配置好开发环境就要求大家开始工作了。</p>
</li>
<li><p>给经理写会议记录无可厚非,但是如果变成了汇报工作就违背了 Scrum 的初衷。有些团队经理甚至把每日 Scrum 会议变成了监督和指挥团 队的会议,这完全违背了 Scrum 的精神。</p>
</li>
<li><p>Burndown Chart<br>Burndown Chart 的横轴表示整个 Sprint 的总时间,纵轴表示 Sprint 中所有的任务, 其单位可以是小时、人天等。一般来说,Burndown Chat 有 Sprint Burndown Chat 和 Release Burndown Chat 之分。<br>1）Sprint Burndown Chart<br>示例如下图所示。<br><img src="http://7sbyks.com1.z0.glb.clouddn.com/scrum0401.jpg" alt=""><br>Sprint Burndown Chart 可以体现 Sprint 的进度。如果 Sprint Burndown Chart 一直 是上升状态,或当 Sprint 进行一段时间之后,Sprint Burndown Chart 上当前点的 Y 值 仍然与 Sprint 刚开始时相差无几,就说明这个 Sprint 中的 Story 过多,要拿掉一些 Story 以保证这个 Sprint 能顺利完成。如果 Sprint Burndown Chart 下降得很快,例如 Sprint 刚过半时 Y 值已经接近零了,则说明为这个 Sprint 分配的任务太少,还要多加一些任务 进来。在 Sprint 计划会议上,如果团队对即将要做的任务理解和认识不充分,就很可能 导致这两种情况的出现。<br>2）Release Burndown Chart<br>Release Burndown Chart 用于记录整个 Scrum 项目的进度,它的横轴是这个项目 的所有 Sprint,纵轴是在各个 Sprint 开始前所有尚未完成的工作,它的单位可以是个(Story 的数量)、人天等。<br>在下图所示的 Release Burndown Chart 示例图中可以看出,这个 Scrum 项 目预计需要用 6 个 Sprint 来完成,项目开始时,预计总共有 300 个 Story,在有些 Sprint 点,这个 Story 数还稍有上升,就像在上图的 Sprint Brundown Chart 中我们看到 的曲线波动一样,这是因为 Scrum 团队增加了一些 Story,但曲线的总体趋势是平缓 向下的。<br><img src="http://7sbyks.com1.z0.glb.clouddn.com/scrum0402.jpg" alt=""></p>
</li>
<li><p>每日 Scrum 会议设立的主要目的是让团队里的所有人都能及 时地理解别人都做了什么?准备做什么?有什么问题?其实也就是整个项目 都完成了什么?还要完成什么?有什么问题阻碍了项目的进行?自己是否有 好的想法来解决这些问题?通过大家提供的信息,Scrum Master 以及每个人 都可以非常明确地知道整个项目的进度,如果整个进度已经落后于之前的计 划,那大家就要想办法来赶上进度了。而且实践证明,这个方法很有效。如 果我们的工作比计划提前了,就可以适时地去调整后面的工作,例如可以增 加一些任务。<br>说到底,<strong>每日 Scrum 会议是一个让大家同步信息的平台,而不是一个交流问题、讨论问题的渠道</strong>,这也是为什么让大家站着开会的初衷。那么应该 在什么时候去讨论问题和解决问题呢?这就是 Scrum Master 的一个非常重要 的职责了。而且,如果在会上有人说自己遇到了一个很麻烦的问题,刚巧有 另外一个知道解决方法,这时候,作为 Scrum Master,你就需要在会后把他 们两个召集在一起,一同解决这个问题,而不是在会上让他们任意地讨论— —毕竟还有别人也在参加这个会议,不要浪费别人的时间。当然,如果没有 人对出现的问题有好的解决方案,你一定要记得不能在会上对这样的问题做 过多的讨论,这是在浪费所有人的时间,你要做的是会后联系其他的资源来 解决这个问题。</p>
</li>
<li><p>如果真的遇到一些问题需要大家一起来讨论的话,完全可 以另找个时间,找一个合适的地点专门来讨论嘛,千万不要让大家在每日 Scrum 会议上站得太久。</p>
</li>
<li><p>固定的时间和固定的地点也有助于团队把每日 Scrum 会议坚持下来,至于召开的 时间则没有定论。大多数团队选择早上一上班的时间,因为头脑清醒;如 果是跨国开发团队,比如关毅他们,下午下班前召开比较合适,因为信息 可以更及时地反馈给比北京晚 10 多个小时的加拿大团队。</p>
</li>
<li><p>小胡的感受</p>
<blockquote>
<p>如果真的说到我对 Scrum 的感受,可能这才一周,我还真的不能 说有太深刻的体会,唯一的感受就是我觉得现在的每一天都过得很充实,每过一天,我都觉得我们离成功近了一步,这是我以前从未感受过的,我想这 可能就是我最大的收获。</p>
</blockquote>
</li>
<li><p>组织中,有些老板不喜欢员工一下班就走。在敏捷实施中,让老板认 同对敏捷的价值观是最重要的。</p>
</li>
<li><p>所谓 Sprint 完成的条件就是不但完成产品功能的开发,而且测试工作也要完成,最后没有特别严重的 Bug。<br>测试工作可以比开发滞后一个或者两个 Sprint,开发也要从下一个 Sprint 开始给测试留有余地。</p>
</li>
<li><p>在很多组织中,敏捷开发都是从下到上推行的。尽可能多地得到上层的支持是 非常关键的。<br>初期采用敏捷开发的团队对于迭代式开发的实质(可以工 作的软件而不是仅开发完功能)要求很容易忽略或觉得难以达到,不妨循序渐进。</p>
</li>
<li><p>Sprint 评审会议<br>Sprint 评审会议在 Sprint 结束时召开,由开发团队展示这个 Sprint 中完成的功能, 长度为两个小时左右,不需要 PPT,一般是已经完成功能的 Demo,而且客户、管理层、 Product Owner 以及其他开发人员等都可以参加。<br>在每个 Sprint 结束时,应该组织一次 Sprint 评审会议。Scrum 开发团队将在会上 展示他们在这个 Sprint 中所做的工作,一般采用向大家演示产品新功能的方式来展示。<br>相对来说,Sprint 评审会议不必很正式。通常不需要用到 PPT,而且长度最好控制 在两个小时之内。也就是说,不要让 Sprint 评审会议成为 Scrum 团队的负担,不必让 他们花太多时间来准备这个会议。<br>Sprint 评审会议的参与者包括所有对该产品感兴趣的人,可以是产品责任人、Scrum 团队、利益相关者、管理层人员、客户,甚至是来自其他项目的开发人员等。<br>在 Sprint 评审会议上,Scrum 团队用 Demo 的形式展示产品的新功能之后,与会人 员依据在 Sprint 计划会议上确定的这个 Sprint 的目标来评审具备了这些新功能的产品。<br>为什么一定要用 Demo 的形式来展示产品的新功能呢?因为这种方式有很多好处。 首先,参与会议的人都能直观地看到 Scrum 团队的工作成果;其次,利益相关者们可 以据此提出更切合实际的反馈意见;第三,为了完成 Demo,团队会努力完成并发布那 些功能,即使只是发布在测试环境下,也比没完成的好。如果不做 Demo,也许不少功 能会停留在“已完成 99%”的阶段。相比较起来,在有 Demo 的情况下,也许“已完 成”的功能数量会相对少一些,但它们是确确实实完成了的。否则,那些“99%”的貌 似完成的功能势必还要拖到下个 Sprint 来解决。<br>假如有一个刚从传统的开发模式转而采用 Scrum 的团队,由于不习惯这种自我约 束、自组织的方式,在 Sprint 中并没做多少工作,那么在会上演示的时候,他们会觉得 很尴尬。没准老板会因为看到他们花了这么多时间只做了这么少的工作而感到很生气。 发生这种情况当然是大家都不想看到的。但良药苦口,在下一个 Sprint 中,这个团队肯 定会吸取教训。他们会明白,无论什么情况下都必须做 Demo,那么他们必然会很好地 完成这个 Sprint 并演示给大家看。</p>
</li>
<li><p>每个 Story 都必须是所有的代码都完成,所有的代码都做过 Unit Test,并 且都提交到代码服务器上,经过测试,才能称作‘Done’。</p>
</li>
<li><p>由于 Scrum 具有高度的可视性,所以团队中谁的状态都隐瞒不了。关 于任务 Done(完成)的标准是个非常重要的问题。在一开始总以为代码完 成了就算 Done 了,其实这离 Scrum 的标准还差得很远。</p>
</li>
<li><p>发现问题不是坏事。Sprint 评审可以帮助团队尽早地发现问题,尽早 地得到使用反馈。</p>
</li>
<li><p>Sprint 回顾会议<br>Sprint 回顾会议由产品责任人、Scrum 团队和 Scrum Master 参加,会议中需要讨 论有哪些好的建议或方法应该被采纳,在 Sprint 中有什么做法不可取,有哪些做法效果 很好,应该继续下去。<br>Sprint 结束后,Scrum 团队回顾刚结束的 Sprint,对其进行总结和反思,使整个团 队能持续成长。<br>Sprint 回顾会议的形式可以比较随意,主要做到以下这些方面就可以了。<br>Scrum Master 首先给大家看 Sprint Backlog,总结这个 Sprint,大家讨论在这个 Sprint 中发生的一些比较重要的事件。与会人员轮流发言,每个人都有机会发表自己的 意见:他认为哪些方面做得好、哪些方面需要改进、如何改进等。还要对比 Sprint Backlog 中各个 Story 的估计值与它们的实际完成时间,如果差距太大,就应该好好分析出现这 种情况的原因。<br>在会议即将结束之前,Scrum Master 总结会上的讨论成果,即“团队如何才能在下个 Sprint 中做得更好”。<br>总之,Sprint 回顾会议的宗旨就是:Scrum 团队如何在下一个 Sprint 中做得更好!</p>
</li>
<li><p>Sprint 回顾会议通常是最容易被忽略的。然而,Sprint 回顾会议其实是非常有用的, 它是整个 Scrum 开发框架中第二重要的事件(最重要的是 Sprint 计划会议),因为它是 让 Scrum 团队成长和进步的最好的机会。如果不开 Sprint 回顾会议,不久以后你就会 发现,你的团队在不断地犯着同样的错误。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>如果真的遇到一个特别大的Story，应该适当地将Story分解。</p>
</li>
<li><p>Sprint计划（Sprint Planning）<br> 在每个 Sprint 开始之前,需要召开 Sprint 计划会议,会议时间一般为 4~8 小时, 参加人员有产品责任人、Scrum Master、Scrum 团队和其他感兴趣的人,比如管理层 人员和客户代表。Product Owner 从产品 Backlog 中挑选高优先级的任务,并与 Scrum 团队一起决定在这个 Sprint 中需要完成多少功能。Scrum 团队将这些任务分解成小的功 能模块。Scrum 团队成员详细讨论如何能按需求完成这些功能模块,并估计完成每个功 能模块所需的大概时间。</p>
</li>
<li><p>当我们进入一个新的领域或者开始一些从未涉及过的工作时，感觉无从下手是很正常的。好的处理方式是打一颗照明弹，尽可能地往远处打，说不定就能发现我们正在走的路是否能通往我们的目标。同时，对于路上的困难，也会有一个感性的认识。<br> 敏捷开发的价值观认为计划是不可能精确估计的。这也是习惯了传统流程的人再转到敏捷开发时会不太适应的地方。但是制定一个粗略的计划反而更符合实际，它可以帮助我们把重点放在更有价值的事情上。</p>
</li>
<li><p>在混乱中建立秩序是Sprint开始阶段的目标。</p>]]>
    
    </summary>
    
      <category term="《轻松scrum之旅——敏捷开发故事》" scheme="http://chunhui.hu/tags/%E3%80%8A%E8%BD%BB%E6%9D%BEscrum%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%85%E4%BA%8B%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《轻松scrum之旅——敏捷开发故事》读书笔记：第3章 准备Scrum之旅]]></title>
    <link href="http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-3-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-3-reading-notes/</id>
    <published>2012-04-15T09:19:53.000Z</published>
    <updated>2015-05-02T08:48:06.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>传统的软件开发流程，比如瀑布流程。从需求、设计，到开发、测试和部署，是一环套一环的，结束一个环节才能开始下一个，中间过程很长，且不允许有变更，等到交付的时候才发现已经与客户的目标相差太远了。这时，要想弥补就要付出巨大的代价，很多工作需要重来，从而产生了巨大的浪费。</p>
</li>
<li><p>什么是<code>敏捷开发</code><br> 它是一种开发方法学（<code>Methodology</code>），可以应对客户快速变更的需求。它强调以人为核心，采用迭代的方式，循序渐进地开发软件。<br> 在敏捷开发过程中，软件项目被划分成多个相互联系但也能独立运行的子项目。这就使得每个子项目在开发、测试直至完成的过程中一直保持可使用的状态。<br> 敏捷开发过程与传统开发过程的最大的不同之处在于，在敏捷开发过程中，团队是有激情、有活力的，能够适应更大的变化，生产出更高质量的软件。</p>
</li>
<li><p>个体和交互重于过程和工具<br> 敏捷方法认为,人是软件开发中最重要的因素。开发团队成员之间有效的交流、沟通与协作,比单纯的编程能力更为重要。人与人面对面的交流,是最有效、最迅速的交 换信息的方式。</p>
</li>
<li><p>可以工作的软件重于面面俱到的文档<br> 过多的文档需要开发人员花费大量时间来维护。文档应该是为程序服务的,因此应当短小精悍、易于维护,而且主题突出。敏捷方法认为最根本的文档就是源码。</p>
 <a id="more"></a>
</li>
<li><p>客户协作重于合同谈判<br> 客户对产品的需求是不断变化的,试图在合同中规定项目的细节和进度显然无法应 对不断变化的需求。<br> 只有开发团队和客户之间真诚的协作,加上频繁的客户反馈,才能 让项目走向成功。</p>
</li>
<li><p>随时响应变化重于循规蹈矩<br> 客户的需求可能在项目开发过程中不断变化,即使是在合同谈判阶段确定的需求, 也可能在客户看见了逐渐成型的产品之后而发生改变。敏捷方法欢迎并且随时准备应对 变化。制定计划的时候应该尽量简洁、灵活,使其能适应技术和需求方面的变化。可以 说,随时响应变化的能力往往决定着一个项目的成败。</p>
</li>
<li><p>敏捷开发方法的核心思想概括起来就是“适应变化”和“以人为本”。<br> (1) 敏捷开发方法是面向人的而非面向过程的。<br> 敏捷开发认为人是软件开发中最重要的因素,而且人工作的环境很复杂。它希望使 软件开发工作顺应人的天性而非逆之,强调软件开发应当是一项令人愉悦的活动,因此 它们注重调动人的积极性、主动性和创造性,并培养人在工作中的自豪感。敏捷开发的 理念就是信任开发团队能够很好地完成任务,所有的管理都是围绕这个理念展开的。<br> (2) 敏捷开发方法是“主动适应的”而不是“预先设定的”。<br> 瀑布模型等传统软件开发过程试图对一个软件开发项目在很长的时间跨度内作出 详细的计划,并形成详细的文档,然后依照计划进行开发。这类方法在计划制定完成后 拒绝变化,后期的需求变化将会花费极大的代价。而敏捷开发方法则乐于迎接变化,其实,它的目的就是成为适应变化的过程。另外,据统计,很多软件产品的功能中,客户 常用的功能只占 20%左右,其他大部分功能是客户很少使用甚至基本不用的。在这种情况下,采用瀑布方式在详细设计阶段所设计出的功能,其实很多是不必要的,这将浪 费很多资源。在敏捷开发中,要求客户始终参与整个开发过程,这使得敏捷团队能不断 地获得客户反馈,不断适应需求的变更,从而使最终的产品充分符合客户的要求,也极 大地减少了资源的浪费。敏捷开发的理念认为未来的开发过程是不可详细预知的。</p>
</li>
<li><p>敏捷开发的理念是信任开发团队，信任每一个人。</p>
</li>
<li><p>敏捷开发的团队也需要管理，但这些管理是非命令式的，很多时候是战略指导和服务性质的。<br> 在敏捷开发中，管理者对团队和项目的管理表现在挑选合适的人、为团队创造一个开放而自由的工作环境、经常性的反馈、为团队建立评估和奖励机制、当团队有方向性错误时能及早发现并纠正、容忍错误的发生等。</p>
</li>
<li><p>敏捷开发也需要文档,也同样要计划。但我们要明白,计划赶不上变化,在这样一个不断变化的情况下要做出详细的计划是不可能的。因此敏捷方法 认为不值得在这些因素上花费过多的资源,可工作的软件才是敏捷方法关注的重点。 敏捷团队依靠变化来获取活力,他们更愿意使设计保持尽可能的干净、简单。基于 以上的原因,采用敏捷方法的项目初始设计是比较粗略的,并需要使用许多测试手 段作为辅助,这就保持了设计的灵活性和易于理解性。团队可以利用这种灵活性持 续地改进设计,以便于每次迭代结束时的系统都具有最适合于那次迭代中需求的设计。摆脱一切对软件开发不合理的束缚就是敏捷。</p>
</li>
<li><p>敏捷联盟的发起人 Martin Fowler 和 Jim Highsmith 曾经这样解释过:敏捷开发所追求的是一种平衡——我们也建模,但不仅仅是画几个模型图存放在少人问津的 项目文档库里;我们也需要文档,但从不浪费纸张去编造那些极少使用而又没有保 存价值的大部头;我们也做计划,但我们同时也认识到在这纷繁复杂的环境中做计 划是困难的。<br>但是,敏捷开发不是可以解决所有问题的银弹。在实际的项目中,受条件的限 制,有些原则实施起来确实有困难,那该怎么办?要知道,敏捷并不要求你们一成 不变地遵循这些条条框框,遇到困难时应该灵活地调整策略,这样才真正达到了敏 捷的目的。</p>
</li>
<li><p>在敏捷开发里,人是最重要的因素,而非流程和工 具。传统流程过分强调流程和工具,因为传统的软件工程是从传统制造业继承而来 的。但是长期以来我们犯的最大错误就是把软件开发比作其他像汽车制造或者建筑 一样的工程来看待。其实软件开发是截然不同的,它是随时随地的创造性的工作, 尽管可能谈不上艺术,但也绝非普通的工程。所以敏捷开发很伟大地跳出了传统的 软件工程,以人为本。</p>
</li>
<li><p>敏捷开发认为人与人之间有效的交流和协作是最重要的,透过一切流程和工具 看本质,实际上就是使人能够协作开发软件。如果能够保持最有效的交流和协作, 又何必在乎流程和工具呢?以前我们为了遵守流程而遵守流程,实际上花了很多力 气,但是走偏了。在所有的交流方式中,面对面的交流是最有效的。可以工作的软 件胜过文档,敏捷开发的宗旨是提供可以工作的软件,只有可以工作的软件才是有价值的。过去,我们要求完备的文档,实际上这些文档并没有创造价值。一切离开 了创造价值的活动都是毫无意义的浪费。所以,凡事如果偏离了本质目标,即使再 努力,也一定做不好。</p>
</li>
<li><p>敏捷开发随时拥抱变化、响应变化,而不是恪守计划。敏捷开发 认为,在软件开发过程中,未来是不可完全预知的,并且要求软件开发团队进行高 度的自我管理,管理者要充分信任开发团队。而传统开发流程认为,未来是可以计 划和预测的,另外,管理者也不完全信任开发团队,需要通过命令和控制的手段来 管理项目。显然,敏捷更真实地符合现实并顺应了管理的趋势,那种从上到下高压式的控制管理方法已经过时了,不单是在软件开发领域,在很多领域都已经被抛弃 了,那其实是工业时代的产物。</p>
</li>
<li><p>不要轻易说成功,产品能按时发布到市场上去不代表成功。我问你 几个问题。你觉得你们组的产品在市场上卖得好吗?有多少功能是客户觉得有用的, 还卖那么贵?对那些没用的功能投入的研发力量是不是一种浪费?你觉得客户对我 们产品的质量满意吗?在产品发布之前,有多少测试和开发工程师需要挑灯夜战? 在产品发布以后,又有多少技术支持和服务的工程师还在忙着修补漏洞?你觉得你 们团队的每个成员都很愉快吗?他们能做到每天高高兴兴按时上班,高高兴兴按时 下班吗?每个成员每天都有进步和成长的感觉吗?</p>
</li>
<li><p>招聘实际上是从写招聘启事开始的,而不仅仅是面试。敏捷开发的核心是人,招到合适的人是所有开发环节中最重要的。</p>
</li>
<li><p><code>极限编程</code>(eXtreme Programming,XP)<br>极限编程的思想源自 Kent Beck 和 Ward Cunningham 在软件项目中的合作经历。在 这里,“eXtreme”的意思是希望将软件开发过程中一些好的方法发挥到极致。XP 注重的 核心在于“沟通、简明、反馈和勇气”,用一句话来概括 XP 的这 4 个核心价值观就是: 通过充分的交流和沟通,使产品的设计尽可能简单明了;同时通过客户经常性的反馈,生 产出符合客户要求的软件产品,并且有勇气迎接需求的改变。<br>另外,极限编程者还总结出一系列经典的实践,形成了 XP 的 12 个主要实践方法, 这些方法对极限编程具有指导性的意义,分别是:客户计划的制定、小版本发布、隐喻、 结对编程、测试驱动开发、重构、稳定的进度、代码共享、编码规范、简单的设计、持 续集成、现场客户。</p>
</li>
<li><p><code>RUP</code>(Rational Unify Process,Rational 统一过程)<br>RUP 试图总结现代软件开发过程中所有好的实践经验,形成一种有很强适应性的软 件开发过程。它包括了软件开发中的6大经验,分别是:迭代式开发、管理需求、可视化建模、使用基于组件的软件体系结构、验证软件质量、控制软件变更。<br>RUP 的9个核心工作流分别是：业务建模、需求、分析与设计、实现、测试、部署、配置与变更管理、项目管理、环境。<br>RUP 的基本原理是:以满足客户需求、为客户创造价值为最终目标;尽可能早且不断地化解重大风险;把注意力放在可工作的软件上;在项目执行过程中尽可能早地适应 变化;在项目早期设计、实现并测试一个可执行的架构;使用组件来构造系统;建立高 效、协作的团队;要始终重视产品质量,否则追悔莫及。</p>
</li>
<li><p>Lean(精益软件开发方法)<br>精益生产的概念首先出现在制造业中,由日本的丰田公司提出。大规模制造理论认 为,一定程度的浪费、一定程度的废品是正常的和被允许的。而在软件开发中,资源浪 费、成本居高不下也同样成为软件开发的一大障碍。处于变革的十字路口的软件开发行 业,总是能不断地从其他行业中寻找可借鉴的理论。这种借鉴来的思路就被称为精益编 程(Lean Programming)。<br>Lean 方法的主要思路有:消除浪费,将所有的时间花在能够增加客户价值的事情 上;延迟决策,在一个复杂多变的环境中进行软件开发,需要根据实际情况保持可选方 案的开放性,但时间不能过长;尽早交付,软件交付的周期越快,用户的需求就会越清 晰,软件应对需求变化的灵活性就越高,让客户的需求来推动工作的进展;加强学习, 承认变化的存在及其不可预见性,加强反馈和交流,在实践中发现问题、解决问题,并最终形成解决方案;授权给团队,正确的决策取决于准确的信息,让开发团队参与决策, 让团队成员充分发挥自己的潜力。<br>无数的经验和教训都已经证明,软件开发中一个巨大的浪费源头就是不注重质量而 导致的返工。人们常常为了追赶工期而降低对质量的要求,殊不知这会带来更大的损失。 Lean 强调消除浪费,这正是为了避免低质量和返工造成的浪费。尽管这样做一开始看 起来似乎有些麻烦,但它所带来的收益是实实在在的。<br>如果采用 Lean 方法,还要注意不要钻牛角尖。消除浪费并不意味着扔掉所有的 文档;尽量推迟决策并不意味着拖延决策,不能晚到错过了时机、耽误了工作才作出 决策;尽快交付并不意味着匆忙交付和马虎行事,否则会为日后的系统维护带来更多 的麻烦和浪费,这恰恰是与消除浪费的原则背道而驰的;授权给团队也并不意味着放 弃领导。</p>
<p>补充总结：<br>XP、RUP、Lean都符合敏捷精神。<br>XP偏重工程实践，缺少框架，不是很系统，没有有效地指导我们应该先做什么、再做什么。<br>RUP的框架太过繁琐，9个核心工作流程的每一项市面上都有厚厚的一本书，让人望而生畏，因此快速上手有些困难，但是很多好的实践可以学习和借鉴一下。<br>Lean更多的是教人一种思维模式，帮助形成具有精益思维和习惯的开发团队。将scrum与精益结合可以使它们互相补充，取长补短。</p>
</li>
<li><p>Scrum<br>是一种灵活的敏捷软件开发管理过程,这个名词来源于英式橄榄球。<br>它将软件开发团队 比作橄榄球队,全队有明确的最高目标——发布产品的重要性高于一切,团队高度自治, 成员们熟悉开发过程中涉及到的各种技术,紧密合作,确保每个迭代都朝着最高目标推 进,而且每隔 2~4 周,每个团队成员都能看到能实际工作的软件,并且据此决定是发 布这个版本还是继续开发以加强它的功能。<br>对于那些功能需求可能经常发生变化的项目来说,Scrum 是最为理想的选择之一。 在一个采用 Scrum 的项目中,首先要将所有需要完成的工作列在一个 Product Backlog 中,项目开发过程中需求的改变也要写进去。在每个 Sprint 开始之前,要召开一个 Sprint 计划会议。在这个会上,产品责任人(Product Owner)为 Product Backlog 中的各项 功能需求确定优先级。随后,Scrum 开发团队按照优先级,从 Product Backlog 中挑选 出他们认为能在这个 Sprint 中完成的任务,并把这些任务从 Product Backlog 中挪到 Sprint Backlog 中去。在 Sprint 的进行过程中,Scrum 团队每天都要举行一个简短的每日 Scrum 会议,以便团队成员了解开发进度。一个 Sprint 结束之后,需要召开 Sprint 评审会议和 Sprint 回顾会议。开发团队在 Sprint 评审会议上把这个 Sprint 的开发成果 展示给大家。而在 Sprint 回顾会议上,团队成员们会回顾刚刚过去的这个 Sprint,从中总结经验和教训。</p>
</li>
<li><p>什么是产品 Backlog?什么是 Sprint Backlog?<br>产品 Backlog 指根据初始需求分解出的任务列表,包括功能性的和非功能性的所有 功能,由 Product Owner 为 Product Backlog 中的任务确定优先级别,当开发团队开始 某个任务的时候,再精确定义和分解这个任务。<br>产品 Backlog 是产品所要具备的所有功能的总纲。当一个项目刚刚开始时,没人能 够事先预见到所有的任务和需求,并为之制定一个充分、详细而又包罗万象的计划。可行的方式是,先为一个项目写下所有它应该具备的显著特征和功能,数量不必很多,最 好够让团队的第 1 个 Sprint 有活可干。<br>随着 Sprint 的进行,生产出可发布的产品增量,客户对产品的直观认识也会随之加 深,他们可以据此建议更改或者添加产品 Backlog 中的任务。<br>在 Sprint 计划会议上,产品负责人为产品 Backlog 中的任务确定优先级,并向 Scrum 团队描述这些任务。Scrum 团队随后根据团队整体情况,确定他们能在这个即将到来的 Sprint 中要完成哪些功能,并把它们挪到 Sprint Backlog 中去。</p>
</li>
<li><p>Scrum 中有 3 种角色,分别是产品负责人(Product Owner)、Scrum Master 和 Scrum 团队,他们各自的职责如下。<br>1）产品负责人(Product Owner)<br>Product Owner 需要确定产品的功能和完成时间,并对产品的收益负责,要根据市 场需求确定产品功能的优先级。在每个 Sprint 开始之前,Product Owner 可以修改功能 需求和优先级。而且,Product Owner 有权决定接受或否决各个 Sprint 的工作成果。<br>Product Owner 的角色通常由市场部门的人员或开发部门内部主要使用该产品的 人员来担任,主要工作是根据市场需求确定产品功能,将其列入 Product Backlog 中, 并为这些功能确定优先级。<br>Scrum 团队按照功能的优先级,将它们从高到低分配到各个 Sprint 中进行开发,这 些被分配到一个 Sprint 中完成的功能就形成了 Sprint Backlog。<br>在产品的整个开发过程中,Product Owner 对于产品的需求可能会发生改变。他可 以修改 Product Backlog,以及增加某些功能需求、删除某些功能需求、修改优先级等, 但这些行为只能在各个 Sprint 之间进行。<br>2）Scrum Master<br>Scrum Master 的职责是:负责监督整个 Scrum 项目进程,调整项目计划;确保开发团队成员的能力能够胜任产品的开发;促进团队中不同角色的成员间充分交流和沟通,并负责为项目的进行扫除障碍;保证开发团队不受外力的干扰和阻挠;掌握产品开 发进度,参与每日 Scrum 会议、Sprint 计划会议和 Sprint 评审会议。<br>Scrum Master 通常由传统开发中的项目组长(Team Leader)来担当。<br>3）Scrum 团队<br>一般由 5~10 个能全职工作的成员组成较为理想。<br>团队成员横跨各个职能,通常包含开发、测试、文档设计人员等。</p>
</li>
<li><p>Story Point 就是每一个 Story 的复杂度,Story Point 的计量单位是人/日,是理想 状态下一个人一天能够完成的工作量。</p>
</li>
<li><p>通常在敏捷开发中,制定的产品 Backlog 不是一成不变的。敏捷开发中的每个 Story 都要求是由市场和客户驱动的。要注意的是,User Story 和 Use Case 是两个不一样的概 念。Use Case 指的是用例,通常用 UML 图来描述,也是用来描述需求的 很好的工具,已经有很多年的历史。Story Point 的计量在一开始不可能做 得很准确,只能做一个大概参考,而且由架构师一个人决定也是不妥的。</p>
</li>
<li><p>User Story<br>Sprint Backlog 里的项目我们通常用 User Story 来描述,User Story 是从用户的角 度对系统的某个功能模块所作的简短描述。一个 User Story 描述了项目中的一个小功 能,以及这个功能完成之后将会产生什么效果,或者说能为客户创造什么价值。<br>User Story 要由 Stakeholder 来编写。User Story 的形式很简单,人们可以很容易 地掌握编写 User Story 的方法。这样就可以保证是由与项目相关的领域专家们来写 User Story,而不是开发人员。<br>我们通常把 User Story 写在一张小卡片上,同时在卡片上标明它的优先级和预计完 成时间,以便开发人员根据任务的优先级来制定 Sprint Backlog。而且,Stakeholder 可以随时更改一个 Story 的优先级,那么此时开发人员就应该相应地调整 Story 的开发次序。<br>一个 User Story 的大小和复杂度应该以能在一个 Sprint 中开发完毕为宜。如果 User Story 太大,可能会导致对它的开发横跨几个 Sprint,这种情况是需要避免的,此时就 应该将这个 User Story 分解。<br>User Story 有一个通用的公式格式,大家可以套用一下试试,很简单。 作为&lt;某个角色&gt;,我可以&lt;做什么&gt;,以完成&lt;什么目的&gt;。<br>例如:作为一个病人,我可以预约一个医生,让他给我看病。<br>这种表达方式清晰明了,提供了足够的信息以供测试。更详细的实现细节会在要完 成这个 User Story 的 Sprint 开始之前确定下来,并补充到 Sprint Backlog 中去。这是一 种把客户需求分解为可测试的且有优先级的任务的有效方式。<br>为了能及时、高效地完成每个 Story,Scrum 团队会把每个 Story 分解成若干个 Task。 每个 Task 都是可以在明确的时间内完成的,而且时间是以小时为计量单位的。<br>特别提示:每个 Task 的时间最好不要超过 8 小时,就是要保证在 1 个工作日内完 成,如果做计划时发现有些 Task 的时间超过了 8 小时,就说明 Task 的划分有问题,需 要特别注意。</p>
</li>
<li><p>工欲善其事,必先利其器。找到一个合适的敏捷项目管理工具并不难, 就算没有,Excel 也是一个很好的替代工具。<br>最常用的几个工具,包括 ScrumWorks、Rational Team Concert、XPlanner。<br>1）ScrumWorks 是一个专门针对 Scrum 项目管理的商业软件。<br>2）IBM Rational Team Concert 是一个十分强大的开发协作平台,属于商业软件。<br>3）XPlanner 是一种针对敏捷开发,尤其是 XP 的项目管理工具,详见 <a href="http://xplanner.org。" target="_blank" rel="external">http://xplanner.org。</a> 不过,XPlanner 对 Scrum 也同样适用。XPlanner 给人的总体感觉比较简单,比较适合非常小的团队。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>传统的软件开发流程，比如瀑布流程。从需求、设计，到开发、测试和部署，是一环套一环的，结束一个环节才能开始下一个，中间过程很长，且不允许有变更，等到交付的时候才发现已经与客户的目标相差太远了。这时，要想弥补就要付出巨大的代价，很多工作需要重来，从而产生了巨大的浪费。</p>
</li>
<li><p>什么是<code>敏捷开发</code><br> 它是一种开发方法学（<code>Methodology</code>），可以应对客户快速变更的需求。它强调以人为核心，采用迭代的方式，循序渐进地开发软件。<br> 在敏捷开发过程中，软件项目被划分成多个相互联系但也能独立运行的子项目。这就使得每个子项目在开发、测试直至完成的过程中一直保持可使用的状态。<br> 敏捷开发过程与传统开发过程的最大的不同之处在于，在敏捷开发过程中，团队是有激情、有活力的，能够适应更大的变化，生产出更高质量的软件。</p>
</li>
<li><p>个体和交互重于过程和工具<br> 敏捷方法认为,人是软件开发中最重要的因素。开发团队成员之间有效的交流、沟通与协作,比单纯的编程能力更为重要。人与人面对面的交流,是最有效、最迅速的交 换信息的方式。</p>
</li>
<li><p>可以工作的软件重于面面俱到的文档<br> 过多的文档需要开发人员花费大量时间来维护。文档应该是为程序服务的,因此应当短小精悍、易于维护,而且主题突出。敏捷方法认为最根本的文档就是源码。</p>]]>
    
    </summary>
    
      <category term="《轻松scrum之旅——敏捷开发故事》" scheme="http://chunhui.hu/tags/%E3%80%8A%E8%BD%BB%E6%9D%BEscrum%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%85%E4%BA%8B%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《轻松scrum之旅——敏捷开发故事》读书笔记：第2章 回首往事]]></title>
    <link href="http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-2-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/15/Qing-song-scrum-zhi-lv-Chapter-2-reading-notes/</id>
    <published>2012-04-15T09:18:27.000Z</published>
    <updated>2015-05-02T08:31:35.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>矩阵式的管理模式：<br> 在需求、设计、开发、测试部门的内部根据独立的模块划分成多个虚拟的项目组，这样就把模块内的需求、设计、开发、测试人员紧密结合起来，可以说是最大化地降低了人员之间的内耗，从而调动起整个项目组的积极性。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>矩阵式的管理模式：<br> 在需求、设计、开发、测试部门的内部根据独立的模块划分成多个虚拟的项目组，这样就把模块内的需求、设计、开发、测试人员紧密结合起来，可以说是最大化地降低了人员之间的内耗，从而调动起整个项目组的积极性。</li>
</ol>
]]>
    </summary>
    
      <category term="《轻松scrum之旅——敏捷开发故事》" scheme="http://chunhui.hu/tags/%E3%80%8A%E8%BD%BB%E6%9D%BEscrum%E4%B9%8B%E6%97%85%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E6%95%85%E4%BA%8B%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《JavaScript高级程序设计》第3章 基本概念(2)]]></title>
    <link href="http://chunhui.hu/2012/04/08/Professional-JavaScript-for-Web-Developers-Chapter-3-2-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/08/Professional-JavaScript-for-Web-Developers-Chapter-3-2-reading-notes/</id>
    <published>2012-04-08T15:47:45.000Z</published>
    <updated>2015-05-02T07:46:51.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>对于有符号的整数，第32位表示数值的符号：0表示正数，1表示负数。该位叫做符号位。<br>对于无符号的整数，第32位不再表示符号，可以用来表示数值。</p>
</li>
<li><p>负数以二进制补码存储。计算补码的步骤为：<br>1）求这个数值绝对值的二进制码<br>2）求二进制反码，即将0替换为1，将1替换为0<br>3）得到的二进制反码加1</p>
</li>
<li><p>在以二进制字符串形式输出一个负数时，只会看到这个负数绝对值的二进制码前面加上了负号。如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">18</span>;</span><br><span class="line">alert(num1.toString(<span class="number">2</span>));     <span class="comment">// "10010"</span></span><br><span class="line"><span class="keyword">var</span> num2 = -<span class="number">18</span>;</span><br><span class="line">alert(num2.toString(<span class="number">2</span>));     <span class="comment">// "-10010"</span></span><br></pre></td></tr></table></figure>
<p>说明转换过程理解了二进制补码并将其以更合乎逻辑的形式展示了出来。</p>
</li>
<li><p>对数值应用位操作符时，后台的转换过程如下：<br>64位的数值被转换成32位数值，然后执行位操作，最后再将32位的结果转换回64位数值。<br>这个过程导致的副效应：在对特殊的<code>NaN</code>和<code>Infinity</code>值应用位操作时，这两个值都会被当做0来处理。<br>对非数值应用位操作符，会先使用<code>Number()</code>函数将该值转换为一个数值，然后应用位操作。</p>
<a id="more"></a>
</li>
<li><p>按位非（～）：结果返回数值的反码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">25</span>;          <span class="comment">// 二进制00000000000000000000011001</span></span><br><span class="line"><span class="keyword">var</span> num2 = ~num1;   <span class="comment">// 二进制11111111111111111111100110</span></span><br><span class="line">alert(num2);              <span class="comment">// -26</span></span><br></pre></td></tr></table></figure>
<p>以上结果验证了按位非操作的本质：操作数的负值减1。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = -num1 - <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>虽然结果一样，但由于按位非是在数值的最底层执行操作，所以速度更快。</p>
</li>
<li><p>左移（&lt;&lt;）和有符号右移（&gt;&gt;）都不会影响操作数的符号位。<br>左移产生的空位会以0来填充，而有符号右移则以符号位的值来填充。</p>
</li>
<li><p>无符号右移用（&gt;&gt;&gt;）来表示。它会将数值的所有32位都向右移动。<br>无符号右移以0来填充空位。因此对正数的无符号右移与有符号右移结果相同，但对负数的结果就不一样了。<br>无符号右移会把负数的二进制码当做正数的二进制码，因此导致负数无符号右移之后的结果非常大。</p>
</li>
<li><p>逻辑非（!）操作符遵循下列规则：<br>1）如果是一个对象，返回<code>false</code><br>2）如果是一个空字符串，返回<code>true</code><br>3）如果是一个非空字符串，返回<code>false</code><br>4）如果是0，返回<code>true</code><br>5）如果是任意非0数值（包括<code>Infinity</code>），返回<code>false</code><br>6）如果是<code>null</code>，返回<code>true</code><br>7）如果是<code>NaN</code>，返回<code>true</code><br>8）如果是<code>undefined</code>，返回<code>true</code></p>
<p>逻辑非操作符也可以用于将一个值转换为其对应的布尔值。而同时使用两个逻辑非操作符实际上与使用<code>Boolean()</code>函数结果相同。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(!!<span class="string">"blue"</span>);     <span class="comment">// true</span></span><br><span class="line">alert(!!<span class="number">0</span>);           <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。规则如下：<br>1）如果第一个操作数是对象，则返回第二个操作数<br>2）如果第二个操作数是对象，则只有在第一个操作数的求值结果为<code>true</code>的情况下才会返回该对象<br>3）如果两个操作数都是对象，则返回第二个操作数<br>4）如果有一个操作数是<code>null</code>，则返回<code>null</code><br>5）如果有一个操作数是<code>NaN</code>，则返回<code>NaN</code><br>6）如果有一个操作数是<code>undefined</code>，则返回<code>undefined</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> result = (found &amp;&amp; foo);     <span class="comment">// 这里会发生错误，因为foo未定义。如果将found的值改为false就不会报错了</span></span><br><span class="line">alert(result);          <span class="comment">// 这一行不会执行</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑或的运算规则如下：<br>1）如果第一个操作数是对象，则返回第一个操作数<br>2）如果第一个操作数的求值结果为<code>false</code>，则返回第二个操作数<br>3）如果两个操作数都是对象，则返回第一个操作数<br>4）如果两个操作数都是<code>null</code>，则返回<code>null</code><br>5）如果两个操作数都是<code>NaN</code>，则返回<code>NaN</code><br>6）如果两个操作数都是<code>undefined</code>，则返回<code>undefined</code></p>
</li>
<li><p>如果参与乘性运算（乘法、除法、求模）的某个操作数不是数值，后台会先使用<code>Number()</code>函数将其转换位数值。</p>
</li>
<li><p>乘法操作符的特殊规则：<br>1）如果有一个操作数是<code>NaN</code>，则结果是<code>NaN</code><br>2）<code>Infinity</code>与0相乘，结果是<code>NaN</code><br>3）<code>Infinity</code>与非0数值相乘，结果是<code>Infinity</code>或<code>-Infinity</code>，取决于有符号操作数的符号<br>4）<code>Infinity</code>与<code>Infinity</code>相乘，结果是<code>Infinity</code><br>5）如果有操作数不是数值，则先调用<code>Number()</code>转换成数值，再运用上述规则</p>
</li>
<li><p>除法操作符的特殊规则：<br>1）如果有一个操作数是<code>NaN</code>，则结果是<code>NaN</code><br>2）<code>Infinity</code>被<code>Infinity</code>除，结果是<code>NaN</code><br>3）<code>Infinity</code>被任意数值除，结果是<code>Infinity</code><br>4）0被0除，结果是<code>NaN</code><br>5）非0有限数被0除，结果是<code>Infinity</code>或<code>-Infinity</code>，取决于有符号操作数的符号<br>6）<code>Infinity</code>被任何非0数值除，结果是<code>Infinity</code>或<code>-Infinity</code>，取决于有符号操作数的符号<br>7）如果有操作数不是数值，则先调用<code>Number()</code>转换成数值，再运用上述规则</p>
</li>
<li><p>取模的特殊规则（略）</p>
</li>
<li><p>加法操作符（+）<br>如果两个操作数都是数值，加法操作符的规则如下：<br>1）如果有一个操作数是<code>NaN</code>，结果是<code>NaN</code><br>2）如果是<code>Infinity</code>加<code>Infinity</code>，结果是<code>Infinity</code><br>3）如果是<code>-Infinity</code>加<code>-Infinity</code>，结果是<code>-Infinity</code><br>4）如果是<code>Infinity</code>加<code>-Infinity</code>，结果是<code>NaN</code><br>5）如果是+0加+0，结果是+0<br>6）如果是-0加-0，结果是-0<br>7）如果是+0加-0，结果是+0</p>
<p>如果有一个操作数是字符串，则规则如下：<br>1）如果两个操作数都是字符串，则将第二个操作数与第一个操作数拼接起来<br>2）如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接起来</p>
<p>如果有一个操作数是对象、数值或布尔值，则调用它们的<code>toString()</code>方法取得相应的字符串值，再应用上述关于字符串的规则。对于<code>undefined</code>和<code>null</code>，则分别调用<code>String()</code>函数并取得字符串“<code>undefined</code>”和“<code>null</code>”。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result1 = <span class="number">5</span> + <span class="number">5</span>;</span><br><span class="line">alert(result1);          <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> result2 = <span class="number">5</span> + <span class="string">"5"</span>;</span><br><span class="line">alert(result2);          <span class="comment">// "55"</span></span><br></pre></td></tr></table></figure>
<p>常见错误：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">"result is "</span> + num1 + num2;</span><br><span class="line">alert(message);     <span class="comment">// "result is 510"</span></span><br></pre></td></tr></table></figure>
<p>之所以结果不是“result is 15”，是因为每个加法操作是独立执行的。第一个加法操作将字符串和数值拼接起来，结果为字符串，第二个加法操作又用这个字符串去加另一个数值，当然也会得到一个字符串。<br>如果想得到“result is 15”的结果，应该使用圆括号。如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"result is "</span> + (num1 + num2);</span><br></pre></td></tr></table></figure>
</li>
<li><p>减法操作符（-）的规则如下：<br>1）如果有一个操作数是<code>NaN</code>，结果是<code>NaN</code><br>2）如果是<code>Infinity</code>减<code>Infinity</code>，结果是<code>NaN</code><br>3）如果是<code>-Infinity</code>减<code>-Infinity</code>，结果是<code>NaN</code><br>4）如果是<code>Infinity</code>减<code>-Infinity</code>，结果是<code>Infinity</code><br>5）如果是<code>-Infinity</code>减<code>Infinity</code>，结果是<code>-Infinity</code><br>6）如果是+0减+0，结果是+0<br>7）如果是+0减-0，结果是-0<br>8）如果是-0减-0，结果是+0<br>9）如果有一个操作数是字符串、布尔值、<code>null</code>或<code>undefined</code>，则先在后台调用<code>Number()</code>函数将其转换为数值，再根据上述规则执行减法计算。<br>10）如果有一个操作数是对象，则调用对象的<code>valueOf()</code>方法以取得表示该对象的数值。如果对象没有<code>valueOf()</code>方法，则调用其<code>toString()</code>方法并将得到的字符串转换为数值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result1 = <span class="number">5</span> - <span class="literal">true</span>;     <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">var</span> result2 = <span class="literal">NaN</span> - <span class="number">1</span>;     <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">var</span> result3 = <span class="number">5</span> - <span class="string">""</span>;         <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">var</span> result4 = <span class="number">5</span> - <span class="string">"2"</span>;       <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> result5 = <span class="number">5</span> - <span class="literal">null</span>;      <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当关系操作符的操作数使用了非数值时的特殊规则：<br>1）如果两个操作数都是数值，则执行数值比较<br>2）如果两个操作数都是字符串，则比较两个字符串对应的字符编码值<br>3）如果一个操作数是数值，则将另一个操作数转换为一个数值，然后执行数值比较<br>4）如果一个操作数是对象，则调用这个对象的<code>valueOf()</code>方法，用得到的结果按照前面的规则执行比较。如果对象没有<code>valueOf()</code>方法，则调用<code>toString()</code>方法，并用得到的结果用上述规则进行比较<br>5）如果一个操作数是布尔值，则先将其转换为数值，然后再进行比较<br>6）任何操作数与<code>NaN</code>进行比较，结果都是<code>false</code></p>
</li>
<li><p>比较两个字符串时，实际比较的是两个字符串中对应位置的每个字符的字符编码值，而不是按照字母表顺序来比较。<br>由于大写字母的字符编码全部小于小写字母的字符编码，因此会有：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"Brick"</span> &lt; <span class="string">"alphabet"</span>;     <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>如果要真正按照字母表顺序比较字符串，就必须把两个操作数转换为相同的大小写形式再比较：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"Brick"</span>.toLowerCase() &lt; <span class="string">"alphabet"</span>.toLowerCase();     <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>下面的比较结果也是同样道理：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"23"</span> &lt; <span class="string">"3"</span>;     <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>因为”2“的字符编码是50，而”3“的字符编码是51。</p>
<p>如果将一个操作数改为数值，结果就正常了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"23"</span> &lt; <span class="number">3</span>;     <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有意思的现象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result1 = <span class="literal">NaN</span> &lt; <span class="number">3</span>;     <span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> result2 = <span class="literal">NaN</span> &gt;= <span class="number">3</span>;   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>按照常理，如果一个值不小于另一个值，则一定是大于或等于那个值。然而，在与<code>NaN</code>进行比较时，两个比较的结果都返回了<code>false</code>。</p>
</li>
<li><p>相等（==）和不相等（!=）<br>都会先转换操作数，然后再比较相等性。<br>转换规则如下：<br>1）如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值：<code>false</code>转换为0，<code>true</code>转换为1<br>2）如果一个操作数是字符串，另一个是数值，则先将字符串转换为数值<br>3）如果一个操作数是对象，另一个不是，则调用对象的<code>valueOf()</code>方法，用得到的值按照前面的规则进行比较</p>
<p>比较规则如下：<br>1）<code>null</code>和<code>undefined</code>相等<br>2）比较之前不能将<code>null</code>和<code>undefined</code>转换成其他值<br>3）如果有一个操作数是<code>NaN</code>，则相等操作符返回<code>false</code>，而不相等操作符返回<code>true</code>。即使两个操作数都是<code>NaN</code>，相等操作符也返回<code>false</code>，因为按照规则，<code>NaN</code>不等于<code>NaN</code>。<br>4）如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回<code>true</code>，否则返回<code>false</code>。</p>
<p>一些特殊情况列表：</p>
<p>| 表达式 | 值 | 表达式 | 值 |<br>| —- | —- | —- | —- |<br>|null == undefined | true | true == 1 | true |<br>| “NaN” == NaN | false | true == 2 | false |<br>| 5 == NaN | false | undefined == 0 | false |<br>| NaN == NaN | false | null == 0 | false |<br>| NaN != NaN | true | “5” == 5 | true |<br>| false == 0 | true | - | - |</p>
</li>
<li><p>逗号操作符除了用于声明多个变量，还可以用于赋值。此时它会返回表达式中的最后一项，如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = (<span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span>);     <span class="comment">// num的值为0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>for-in</code>语句是一种精准的迭代语句，可以用来枚举对象的属性。语法如下：<br> <code>for (property in expression)     statement</code><br>示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">     <span class="built_in">document</span>.write(propName);</span><br><span class="line">     <span class="built_in">document</span>.write(<span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ECMAScript对象的属性没有顺序。因此，通过<code>for-in</code>循环输出的属性名的顺序是不可预测的。具体来讲，所有属性都会被返回一次，但返回的先后次序可能会因浏览器而异。</p>
</li>
<li><p><code>label</code>语句可以在代码中添加标签，以便将来使用。语法如下：<br> <code>label: statement</code><br>示例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">     alert(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义的<code>start</code>标签可以在将来由<code>break</code>或<code>continue</code>语句引用。<br>虽然联用<code>break</code>、<code>continue</code>和<code>label</code>语句能够执行复杂的操作，但如果使用过度，也会给调试带来麻烦。因此如果使用<code>label</code>语句，一定要使用描述性的标签，同时不要嵌套过多的循环。</p>
</li>
<li><p><code>with</code>语句的作用是将代码的作用域设置到一个特定的对象中。语法如下：<br> <code>with (expression) statement</code><br>定义<code>with</code>语句的目的主要是为了简化多次编写同一个对象的工作。如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> hostName = location.hostname;</span><br><span class="line"><span class="keyword">var</span> url = location.href;</span><br></pre></td></tr></table></figure>
<p>如果使用<code>with</code>语句，则为：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(location) &#123;</span><br><span class="line">     <span class="keyword">var</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line">     <span class="keyword">var</span> hostName = hostname;</span><br><span class="line">     <span class="keyword">var</span> url = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>with</code>语句的代码块内部，每个变量首先被认为是一个局部变量，如果在局部环境中找不到该变量的定义，就会查询<code>location</code>对象中是否有同名的属性。如果发现了同名属性，则以<code>location</code>对象属性的值作为变量的值。</p>
<p>由于大量使用<code>with</code>语句会导致性能下降，同时也会给调试代码造成困难，因此在开发大型应用程序时，不建议使用<code>with</code>语句。</p>
</li>
<li><p><code>switch</code>语句<br>1）在<code>switch</code>语句中可以使用任何数据类型（很多其他语言中只能使用数值）。<br>2）每个<code>case</code>的值不一定是常量，可以是变量，甚至是表达式。<br>例1：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="string">"hello world"</span>) &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">"hello"</span> + <span class="string">" world"</span>:</span><br><span class="line">          alert(<span class="string">"Greeting!"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">"goodbye"</span>:</span><br><span class="line">          alert(<span class="string">"Closing!"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例2：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> num &lt; <span class="number">0</span>:</span><br><span class="line">          alert(<span class="string">"a"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> num &gt;= <span class="number">0</span> &amp;&amp; num &lt;= <span class="number">10</span>:</span><br><span class="line">          alert(<span class="string">"b"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">          alert(<span class="string">"c"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：<code>switch</code>语句在比较值时使用的是全等操作符，因此不会发生类型转换。</p>
</li>
<li><p><code>return</code>语句可以不带有任何返回值。此时函数将返回<code>undefined</code>值。<br>推荐的做法是：要么让函数始终都返回一个值，要么永远都不要返回值。否则，会给调试代码带来不便。</p>
</li>
<li><p>函数参数<br>ECMAScript的函数不介意传递进来多少个参数，也不在乎传进来的参数是什么数据类型。<br>即使定义的函数只接收两个参数，在调用时也未必一定要传递两个参数，可以传递一个、三个甚至不传递参数。<br>原因是ECMAScript中的参数在内部是用一个数组来表示，数组中是否包含元素或者包含多少个元素都无所谓。在函数体内部可以通过<code>arguments</code>对象来访问这个参数数组。<br>其实<code>arguments</code>对象只是与数组类似（它并不是<code>Array</code>的实例），因为可以使用方括号语法访问它的每一个元素（第一个元素是<code>arguments[0]</code>，第二个元素是<code>arguments[1]</code>，以此类推），可以使用<code>length</code>属性来确定传递进来多少个参数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     alert(<span class="string">"Hello "</span> + <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="string">", "</span> + <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没有传递值的命名参数将自动被赋予<code>undefined</code>值。</p>
<p>ECMAScript中的所有参数传递的都是值，不可能通过引用传递参数。</p>
</li>
<li><p>ECMAScript的函数不能像传统意义上那样实现重载。而在其他语言（如Java）中，可以为一个函数编写两个定义，只要这两个定义的签名（接收的参数的类型和数量）不同即可。<br>如果定义了两个名字相同的函数，则该名字只属于后定义的函数。后定义的函数会覆盖先定义的函数。<br>可以通过检查传入函数中参数的类型和数量并做出不同的反应，来模仿方法的重载。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>对于有符号的整数，第32位表示数值的符号：0表示正数，1表示负数。该位叫做符号位。<br>对于无符号的整数，第32位不再表示符号，可以用来表示数值。</p>
</li>
<li><p>负数以二进制补码存储。计算补码的步骤为：<br>1）求这个数值绝对值的二进制码<br>2）求二进制反码，即将0替换为1，将1替换为0<br>3）得到的二进制反码加1</p>
</li>
<li><p>在以二进制字符串形式输出一个负数时，只会看到这个负数绝对值的二进制码前面加上了负号。如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">18</span>;</span><br><span class="line">alert(num1.toString(<span class="number">2</span>));     <span class="comment">// "10010"</span></span><br><span class="line"><span class="keyword">var</span> num2 = -<span class="number">18</span>;</span><br><span class="line">alert(num2.toString(<span class="number">2</span>));     <span class="comment">// "-10010"</span></span><br></pre></td></tr></table></figure>
<p>说明转换过程理解了二进制补码并将其以更合乎逻辑的形式展示了出来。</p>
</li>
<li><p>对数值应用位操作符时，后台的转换过程如下：<br>64位的数值被转换成32位数值，然后执行位操作，最后再将32位的结果转换回64位数值。<br>这个过程导致的副效应：在对特殊的<code>NaN</code>和<code>Infinity</code>值应用位操作时，这两个值都会被当做0来处理。<br>对非数值应用位操作符，会先使用<code>Number()</code>函数将该值转换为一个数值，然后应用位操作。</p>]]>
    
    </summary>
    
      <category term="《JavaScript高级程序设计》" scheme="http://chunhui.hu/tags/%E3%80%8AJavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《JavaScript高级程序设计》第3章 基本概念(1)]]></title>
    <link href="http://chunhui.hu/2012/04/08/Professional-JavaScript-for-Web-Developers-Chapter-3-1-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/08/Professional-JavaScript-for-Web-Developers-Chapter-3-1-reading-notes/</id>
    <published>2012-04-08T15:42:01.000Z</published>
    <updated>2015-05-02T07:11:32.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>ECMAScript的发音是：<code>ek-ma-script</code>。</p>
</li>
<li><p>ECMAScript中的一切都区分大小写。</p>
</li>
<li><p>标识符的命名规则：<br> 第一个字符必须是一个字母、下划线或美元符号；<br> 其他字符可以是字母、下划线、美元符号或数字。<br> 标识符中的字母也可以包含扩展的ASCII或Unicode字母字符，但不推荐。<br> 书写格式建议采用驼峰大小写格式。主要是为了与内置的函数和对象命名格式保持一致。</p>
</li>
<li><p>语句以分号结尾，也可以省略分号。但是加上分号可以避免很多错误，也可以放心地进行代码压缩。<br> 另外加上分号也会在某些情况下增进代码的性能，因为这样解析器就不必再花时间推测应该在哪里插入分号了。</p>
 <a id="more"></a>
</li>
<li><p>使用var操作符定义的变量将成为定义该变量的作用域中的局部变量。<br> 也就是说，如果在函数中使用var定义一个变量，那么这个变量在函数退出后就会被销毁。如：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> message = <span class="string">"hi"</span>;     <span class="comment">//局部变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">alert(message);     <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<p> 可以省略var操作符，从而创建一个全局变量：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     message = <span class="string">"hi"</span>;     <span class="comment">//全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">alert(message);     <span class="comment">// "hi"</span></span><br></pre></td></tr></table></figure>
<p> 虽然省略var操作符可以定义全局变量，但这不是推荐的做法。因为在局部作用域中定义的全局变量很难维护，而且如果有意地忽略了var操作符，也会由于相应变量不会马上就有定义而导致不必要的混乱。</p>
</li>
<li><p>数据类型<br> 简单（基本）数据类型：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code><br> 复杂数据类型：<code>Object</code>（由一组无序的名值对组成）</p>
</li>
<li><p>对一个值使用<code>typeof</code>操作符可能返回下列某个字符串：<br> “<code>undefined</code>”——如果这个值未定义<br> “<code>boolean</code>”——如果这个值是布尔值<br> “<code>string</code>”——如果这个值是字符串<br> “<code>number</code>”——如果这个值是数值<br> “<code>object</code>”——如果这个值是对象或<code>null</code><br> “<code>function</code>”——如果这个值是函数</p>
<p> 由于<code>typeof</code>是一个操作符而不是函数，所以以下两种写法都正确：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> message</span><br><span class="line"><span class="keyword">typeof</span>(message)</span><br></pre></td></tr></table></figure>
<p> 从技术角度讲，函数在ECMAScript中是对象，不是一种数据类型。然而，函数也确实有一些特殊的属性，因此通过typeof来区分函数和其他对象是有必要的。</p>
</li>
<li><p>未经初始化的值默认都是<code>undefined</code>。<br> 字面值<code>undefined</code>是在ECMA-262的第3版引入的，主要是为了正式区分空对象指针与未经初始化的变量。</p>
<p> 包含<code>undefined</code>值的变量与尚未定义的变量还是不一样的。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message;     </span><br><span class="line">alert(message);     <span class="comment">//“undefined”</span></span><br><span class="line">alert(age);     <span class="comment">//产生错误</span></span><br></pre></td></tr></table></figure>
<p> 对于尚未声明过的变量，只能执行一项操作，即用<code>typeof</code>操作符检测其数据类型。</p>
<p> 对未初始化和未声明的变量执行<code>typeof</code>操作符都会返回<code>undefined</code>。因此显式地初始化变量依然是明智的选择，这样当<code>typeof</code>返回<code>undefined</code>时，我们就知道被检测的变量还没有被声明，而不是尚未初始化。</p>
</li>
<li><p><code>null</code>值表示一个空对象指针，用<code>typeof</code>检测时会返回<code>object</code>。<br> 如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为<code>null</code>而不是其他值。这样只要直接检查<code>null</code>值就可以知道相应的变量是否已经保存了一个对象的引用了，如：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (car != <span class="literal">null</span>) &#123;</span><br><span class="line">     <span class="comment">//对car对象执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <code>undefined</code>值是派生自<code>null</code>值的，因此ECMA-262规定对它们的相等性测试要返回<code>true</code>：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>);     <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p> 无论在什么情况下都没有必要把一个变量的值显式地设置为<code>undefined</code>，但是对<code>null</code>却不一样。只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存<code>null</code>值。这样做不仅可以体现<code>null</code>作为空对象指针的惯例，而且也有助于进一步区分<code>null</code>和<code>undefined</code>。</p>
</li>
<li><p><code>Boolean</code>类型的字面值<code>true</code>和<code>false</code>是区分大小写的。也就是说，<code>True</code>和<code>False</code>（以及其他的混合大小写形式）都不是<code>Boolean</code>值，只是标识符。<br>要将一个值转换为其对应的<code>Boolean</code>值，可以调用函数<code>Boolean()</code>。<br>各种数据类型及其对应的转换规则如下：</p>
<p>|数据类型 | 转换为true的值 | 转换为false的值|<br>| —— | —— | ——|<br>|Boolean | true | false|<br>|String | 任何非空字符串 | “”（空字符串）|<br>|Number | 任何非零数字值（包括无穷大） | 0和NaN|<br>|Object | 任何对象 | null|<br>|Undefined | n/a（不适用） | undefined|</p>
<p>以上规则对理解流控制语句（如if语句）自动执行相应的Boolean转换非常重要。</p>
</li>
<li><p>整数可以通过十进制、八进制、十六进制来表示。<br>八进制字面值的第一位必须是零（0），然后时八进制数字序列（0～7）。如果字面值中的数值超出了范围， 那么前导零将被忽略，后面的数值将被当做十进制数值解析。<br>十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0～9及A～F）。其中，字母A～F可以大写，也可以小写。<br>在进行算术计算时，所有以八进制和十六进制表示的数值最终都将被转换成十进制数值。</p>
</li>
<li><p>浮点数的小数点前面可以没有整数，但是不推荐这种写法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> floatNum = .<span class="number">1</span>;     <span class="comment">//有效，但不推荐</span></span><br></pre></td></tr></table></figure>
<p>由于保存浮点数值需要的内存空间是保存整数值的两倍，因此ECMAScript会在适当的时候将浮点数值转换为整数值：<br>1）如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。<br>2）如果浮点数值本身表示的就是一个整数（如1.0），那么该值也会被转换为整数。</p>
</li>
<li><p>在默认情况下，ECMAScript会将那些小数点后面带有6个零以上的浮点数值转换为以e表示法表示的数值（例如，0.0000003会被转换成3e-7）。<br>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。<br>例如，0.1加0.2的结果不是0.3，而是0.300000000000004.<br>这个小小的舍入误差会导致无法测试特定的浮点数值。例如：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a + b == <span class="number">0.3</span>) &#123;     <span class="comment">//不要做这样的测试！</span></span><br><span class="line">     alert(<span class="string">"0.3"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果这两个数是0.05和0.25，或者是0.15和0.15都不会有问题。但如果是0.1和0.2，那么测试将无法通过。因此，永远不要测试某个特定的浮点数值。</p>
</li>
<li><p>ECMAScript能够表示的最小数值保存在<code>Number.MIN_VALUE</code>中。在大多数浏览器中，这个值是<code>5e-324</code>；<br>能够表示的最大数值保存在<code>Number.MAX_VALUE</code>中。在大多数浏览器中，这个值是<code>1.7976931348623157e+308</code>。<br>如果超过了数值范围，那么数值将被自动转换成特殊的<code>Infinity</code>值。负数转换成<code>-Infinity</code>（负无穷），正数转换成<code>Infinity</code>（正无穷）。这两个值都不能参与运算。<br>要想确定一个数是不是有穷的，使用<code>isFinite()</code>函数。<br>访问<code>Number.NEGATIVE_INFINITY</code>和<code>Number.POSITIVE_INFINITY</code>也可以得到正和负<code>Infinity</code>的值。这两个属性中分别保存着<code>-Infinity</code>和<code>Infinity</code>。</p>
</li>
<li><p><code>NaN</code><br>即<code>Not a Number</code>，她是一个特殊的数值。用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）。<br>在ECMAScript中，任何数值除以0会返回<code>NaN</code>。<br>特点：<br>1）任何涉及<code>NaN</code>的操作（例如<code>NaN/10</code>）都会返回<code>NaN</code>。<br>2）<code>NaN</code>与任何值都不相等，包括<code>NaN</code>本身。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="literal">NaN</span> == <span class="literal">NaN</span>);     <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>isNaN()</code>函数<br>它在接收到一个值之后，会尝试将这个值转换为数值。某些不是数值的值会直接转换为数值。而任何不能被转换为数值的值都会导致这个函数返回<code>true</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));       <span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">isNaN</span>(<span class="number">10</span>));          <span class="comment">//false</span></span><br><span class="line">alert(<span class="built_in">isNaN</span>(<span class="string">"10"</span>));       <span class="comment">//false（可以被转换成数值10）</span></span><br><span class="line">alert(<span class="built_in">isNaN</span>(<span class="string">"blue"</span>));     <span class="comment">//true（不能转换成数值）</span></span><br><span class="line">alert(<span class="built_in">isNaN</span>(<span class="literal">true</span>));        <span class="comment">//false（可以被转换成数值1）</span></span><br></pre></td></tr></table></figure>
<p><code>isNaN()</code>也适用于对象。在基于对象调用<code>isNaN()</code>时，会首先调用对象的<code>valueOf()</code>方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个返回值再调用<code>toString()</code>方法，再测试返回值。这个过程也是ECMAScript中内置函数和操作符的一般执行流程。</p>
</li>
<li><p>数值转换<br><code>Number()</code>：可以用于任何数据类型<br><code>parseInt()</code>和<code>parseFloat()</code>：专门用于把字符串转换成数值</p>
</li>
<li><p><code>Number()</code>的转换规则：<br>1）<code>true</code>和<code>false</code>分别转换成1和0<br>2）<code>null</code>值返回0<br>3）<code>undefined</code>返回<code>NaN</code><br>4）字符串遵循以下规则：</p>
<ul>
<li>如果字符串中只包含数字，则转换为十进制数值。如：“123”变成123，“011”变成11（前导零被忽略）</li>
<li>如果字符串中包含有效的浮点格式，如“1.1”，则转换为对应的浮点数值</li>
<li>如果字符串中包含有效的十六进制格式，如“0xf”，则转换为对应的十进制整数值（八进制数字按照a规则转换）</li>
<li>如果字符串是空的，则转换为0</li>
<li>如果字符串包含除上述格式之外的字符，则转换为<code>NaN</code></li>
</ul>
<p>5）如果是对象，则调用对象的<code>valueOf()</code>方法，然后依照上述规则转换返回的值。如果结果是<code>NaN</code>，则调用对象的<code>toString()</code>方法，然后再次依照上述规则转换返回的字符串值。</p>
</li>
<li><p><code>parseInt()</code>的转换规则<br>它会忽略字符串前面的空格，直至找到第一个非空格字符。<br>如果第一个字符不是数字字符或者负号，则返回<code>NaN</code>，因此空字符串会返回<code>NaN</code>。<br>如果第一个字符是数字字符，则会继续解析第二个字符，直到解析完所有后续字符或遇到非数字字符。如：“1234blue”转换为1234，“22.5”转换为22。<br>如果字符串以“0x”开头且后跟数字字符，就会将其当做一个十六进制整数；如果字符串以“0”开头且后跟数字字符，则会将其当做一个八进制数来解析。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"0xA"</span>);     <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">"0x1t"</span>);     <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">"0xt"</span>);     <span class="comment">// NaN（注意不是0）</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="string">"070"</span>);     <span class="comment">// 56</span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseInt</span>(<span class="string">"70"</span>);     <span class="comment">// 70</span></span><br></pre></td></tr></table></figure>
<p><code>parseInt()</code>函数有第二个参数，可以指定转换时使用多少进制。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">"0xAF"</span>, <span class="number">16</span>);     <span class="comment">// 175</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"AF"</span>, <span class="number">16</span>);     <span class="comment">// 此时可不带“0x”</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">"AF"</span>);     <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p>为了避免错误的解析，建议无论在什么情况下都明确指定基数。</p>
</li>
<li><p><code>parseFloat()</code>的转换规则</p>
<ul>
<li>字符串中的第一个小数点是有效的，而第二个小数点就是无效的了。</li>
<li>它始终都会忽略前导的零</li>
<li>十六进制格式的字符串始终会被转换成0</li>
<li>只解析十进制值，没有第二个参数指定进制</li>
<li>如果字符串包含的是一个可解析为整数的数（没有小数点或者小数点后都是0），则会返回整数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">"1234blue"</span>);     <span class="comment">// 1234</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">"0xA"</span>);     <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">"22.5"</span>);     <span class="comment">// 22.5</span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseFloat</span>(<span class="string">"22.34.5"</span>);     <span class="comment">// 22.34</span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">"098.5"</span>);     <span class="comment">// 98.5</span></span><br><span class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseFloat</span>(<span class="string">"3.125e7"</span>);     <span class="comment">// 31250000</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>用双引号表示的字符串和用单引号表示的字符串完全相同。</p>
</li>
<li><p>转移序列<br><code>\n</code>：换行<br><code>\b</code>：空格<br><code>\xnn</code>：以十六进制代码nn表示的一个字符（其中n为0～F）。例如，<code>\x41</code>表示“A”<br><code>\unnnn</code>：以十六进制代码nnnn表示的一个Unicode字符（其中n为0～F）。例如，<code>\u03a3</code>表示希腊字符<code>Σ</code></p>
<p>这些序列可以出现在字符串中的任意位置，并且将被作为一个字符来解析。</p>
</li>
<li><p>字符串的长度可以通过访问其<code>length</code>属性获得：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(text.length);</span><br></pre></td></tr></table></figure>
<p>但如果字符串中包含双字节字符，该属性可能不会精确地返回字符串中的字符数目。</p>
</li>
<li><p>要改变某个变量保存的字符串，首先要销毁原来的字符串，然后用另一个包含新值的字符串填充该变量：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lang = <span class="string">"Java"</span>;</span><br><span class="line">lang = lang + <span class="string">"Script"</span>;</span><br></pre></td></tr></table></figure>
<p>以上操作的实际过程为：<br>首先创建一个能容纳10个字符的新字符串，然后在这个字符串中填充“Java”和“Script”，最后销毁原来的字符串“Java”和字符串“Script”。<br>以上过程是在后台发生的，这也是某些旧版本的浏览器中拼接字符串时速度很慢的原因所在。</p>
</li>
<li><p>字符串转换<br>1）使用<code>toString()</code>方法<br>该方法直接返回相应值的字符串表现。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">11</span>;</span><br><span class="line">age.toString();     <span class="comment">// 字符串“11”</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">a.toString();     <span class="comment">// 字符串“true”</span></span><br></pre></td></tr></table></figure>
<p>数值、布尔值、对象和字符串都有<code>toString()</code>方法。但<code>null</code>和<code>undefined</code>没有这个方法。<br>字符串的<code>toString()</code>方法返回字符串的一个副本。<br>在调用数值的<code>toString()</code>方法时，可以传递一个参数：输出数值的基数。默认情况下<code>toString()</code>方法以十进制格式返回数值的字符串表示。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">alert(num.toString());     <span class="comment">// "10"</span></span><br><span class="line">alert(num.toString(<span class="number">2</span>));     <span class="comment">// "1010"</span></span><br></pre></td></tr></table></figure>
<p>2）使用函数<code>String()</code><br>能够将任何类型的值转换为字符串。规则如下：</p>
<ul>
<li>如果值有<code>toString()</code>方法，则调用该方法返回相应的结果</li>
<li>如果值为<code>null</code>，则返回“<code>null</code>”</li>
<li>如果值为<code>undefined</code>，则返回“<code>undefined</code>”</li>
</ul>
</li>
<li><p>在ECMAScript中，<code>Object</code>类型是所有它的实例的基础。即<code>Object</code>类型所具有的任何属性和方法也同样存在于更具体的对象中。<br><code>Object</code>的每个实例都具有如下属性和方法：</p>
<ul>
<li><code>constructor</code>——保存着用于创建当前对象的函数</li>
<li><code>hasOwnProperty(propertyName)</code>——用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中<code>propertyName</code>必须以字符串形式指定</li>
<li><code>isPrototypeOf(object)</code>——用于检查传入的对象是否是另一个对象的原型</li>
<li><code>propertyIsEnumerable(propertyName)</code>——用于检查给定的属性是否能够使用<code>for-in</code>语句来枚举</li>
<li><code>toString()</code>——返回对象的字符串表示</li>
<li><code>valueOf()</code>——返回对象的字符串、数值或布尔值表示。通常与<code>toString()</code>方法的返回值相同</li>
</ul>
</li>
<li><p>IE中只有开发人员定义的对象才继承自<code>Object</code>。<code>BOM</code>和<code>DOM</code>对象也可能不会具有<code>Object</code>的所有属性和方法。</p>
</li>
<li><p>递增和递减操作符（++、—）<br>对任何值都适用，遵循下列规则：<br>1）应用于包含有效数字字符的字符串时，先将其转换为数字值，再执行加减1的操作。字符串变量变成数值变量。<br>2）应用于不包含有效数字字符的字符串时，将变量的值设置为<code>NaN</code>。字符串变量变成数值变量。<br>3）应用于布尔值时，<code>true</code>转换为1，<code>false</code>转换为0，再进行加减1的操作。布尔值变量变成数值变量。<br>4）应用于对象时，先调用对象的<code>valueOf()</code>方法，然后应用上述规则，如果结果是<code>NaN</code>，则在调用<code>toString()</code>方法后再应用上述规则。对象变量变成数值变量。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">     valueOf: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line">o--;     <span class="comment">// 值变成数值-2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一元加和减操作符（+、-）<br>1）放在数值前面对数值不会对数值的类型产生影响<br>2）放在非数值前面，则会像<code>Number()</code>函数一样对这个值执行转换</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"01"</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"1.1"</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">"z"</span>;</span><br><span class="line">s1 = +s1;     <span class="comment">//值变成数值1</span></span><br><span class="line">s2 = +s2;     <span class="comment">//值变成数值1.1</span></span><br><span class="line">s3 = +s3;     <span class="comment">//值变成NaN</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ECMAScript中的所有数值都以IEEE-754 64位格式存储，但位操作符并不直接操作64位的值。<br>而是先将64位的值转换成32位的整数，然后执行操作，最后再将结果转换回64位。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>ECMAScript的发音是：<code>ek-ma-script</code>。</p>
</li>
<li><p>ECMAScript中的一切都区分大小写。</p>
</li>
<li><p>标识符的命名规则：<br> 第一个字符必须是一个字母、下划线或美元符号；<br> 其他字符可以是字母、下划线、美元符号或数字。<br> 标识符中的字母也可以包含扩展的ASCII或Unicode字母字符，但不推荐。<br> 书写格式建议采用驼峰大小写格式。主要是为了与内置的函数和对象命名格式保持一致。</p>
</li>
<li><p>语句以分号结尾，也可以省略分号。但是加上分号可以避免很多错误，也可以放心地进行代码压缩。<br> 另外加上分号也会在某些情况下增进代码的性能，因为这样解析器就不必再花时间推测应该在哪里插入分号了。</p>]]>
    
    </summary>
    
      <category term="《JavaScript高级程序设计》" scheme="http://chunhui.hu/tags/%E3%80%8AJavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《JavaScript高级程序设计》第2章 在HTML中使用JavaScript]]></title>
    <link href="http://chunhui.hu/2012/04/08/Professional-JavaScript-for-Web-Developers-Chapter-2-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/08/Professional-JavaScript-for-Web-Developers-Chapter-2-reading-notes/</id>
    <published>2012-04-08T15:40:03.000Z</published>
    <updated>2015-05-01T16:32:55.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>HTML 4.01为<code>&lt;script&gt;</code>定义了下列5个属性：</p>
<ul>
<li>charset<br>可选。表示通过src属性指定的代码的字符集。由于大多数浏览器会忽略它的值，因此这个属性很少有人用。</li>
<li>defer<br>可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。</li>
<li>language<br>已废弃。原来用于表示编写代码使用的脚本语言（如JavaScript、JavaScript1.2或VBScript）。大多数浏览器会忽略这个属性，因此也没有必要再用了。</li>
<li>src<br>可选。表示包含要执行代码的外部文件。</li>
<li><p>type<br>必需。可以看成是language的替代属性；表示编写代码使用的脚本语言的内容类型（也称为MIME类型）。虽然<code>text/javascript</code>和<code>text/ecmascript</code>都已经不被推荐使用，但人们一直以来使用的都还是<code>text/javascript</code>。实际上，服务器在传送js文件时使用的MIME类型通常是<code>application/x-javascript</code>，但在type中设置这个值却可能导致脚本被忽略。另外，在非IE浏览器中还可以使用一下值：<code>application/javascript</code>和<code>application/ecmascript</code>。考虑到约定俗成和最大限度的浏览器兼容性，目前type属性的值依旧还是<code>text/javascript</code>。</p>
<a id="more"></a>
</li>
</ul>
</li>
<li><p>在使用<code>&lt;script&gt;</code>嵌入JavaScript代码时，记住不要在代码中的任何地方出现“<code>&lt;/script&gt;</code>”字符串。<br>例如，浏览器在加载下面所示的代码时就会产生一个错误：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">sayScript</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          alert(<span class="string">"&lt;/script&gt;"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p> 通过把这个字符串分隔为两部分可以解决这个问题，例如：</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">sayScript</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          alert(<span class="string">"&lt;/scr"</span> + <span class="string">"ipt&gt;"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p> 注：将&gt;转义后也可以。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"&lt;/script\&gt;"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照惯例，外部JavaScript文件带有.js扩展名。但这个扩展名不是必需的，因为浏览器不会检查包含JavaScript的文件的扩展名。这样一来，使用JSP、PHP或其他服务器语言动态生成JavaScript代码也就成为了可能。</p>
</li>
<li><p>带有src属性的<code>&lt;script&gt;</code>元素不应该在其<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>标签之间再包含额外的JavaScript代码。其间的代码不会被执行。</p>
</li>
<li><p><code>&lt;script&gt;</code>的defer属性会让脚本延迟到整个页面都解析完毕后再运行。与把<code>&lt;script&gt;</code>元素放在页面最底部的效果是一样的。<br> 不过，并非所有浏览器都支持defer属性。IE和Firefox3.1（今后可能还有其他的浏览器）是目前唯一支持defer属性的主流浏览器。其他浏览器则会忽略这个属性，不延迟脚本的执行。</p>
</li>
<li><p>在XHTML中的用法<br> 比较语句“a &lt; b”中的小于号（&lt;）在XHTML中将被当做开始一个新标签来解析。但是标签后不能跟空格，因此会导致语法错误。<br> 避免出现类似语法错误的方法有两个。<br> 一是用相应的HTML实体（<code>&amp;lt;</code>）替换小于号（&lt;）。但会导致代码不好理解。<br> 二是用CData片段来包含JavaScript代码。如下所示：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="prolog">&lt;![<span class="name">CDATA</span>[</span><br><span class="line">     //你的<span class="name">JS</span>代码</span><br><span class="line">]]]] &gt; </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 但是还有不少浏览器不兼容XHTML，因而不支持CDATA片段。所以需要将CDATA标记注释掉：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="1c"></span><br><span class="line"><span class="comment">//&lt;![CDATA[</span></span><br><span class="line">     <span class="comment">//你的JS代码</span></span><br><span class="line"><span class="comment">//]]]] &gt;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不推荐使用的语法</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="dust"><span class="xml"><span class="comment">&lt;!--</span><br><span class="line">     function sayHi() </span></span><span class="expression">&#123;</span><br><span class="line">          <span class="variable">alert</span>(<span class="string">"Hi!"</span>);</span><br><span class="line">     &#125;</span><span class="xml"><span class="comment"></span><br><span class="line">//--&gt;</span></span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 该种写法是为了兼容历史上不支持<code>&lt;script&gt;</code>元素的浏览器而提出的。目前所有浏览器都已经支持JavaScript，因此也就没必要再使用了。</p>
</li>
<li><p>一般认为最好的做法是尽可能使用外部文件来包含JavaScript代码。有如下优点：<br> 1）可维护性<br> 2）可缓存<br> 3）可适应未来——通过外部文件来包含JavaScript无须使用XHTML或注释hack。HTML和XHTML包含外部文件的语法是相同的。</p>
</li>
<li><p>文档模式<br> IE5.5引入了文档模式的概念。最初的两种模式为：<br> 混杂模式（quirks mode）：会让IE的行为与IE5相同。<br> 标准模式（standards mode）：让IE的行为更接近标准行为。<br> 后来IE又提出一种模式：<br> 准标准模式（almost standards mode）：大部分特性都符合标准。<br> 如果文档开始处没有文档类型声明，则所有浏览器都会默认开启混杂模式。</p>
<p> 标准模式用以下声明开启：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  HTML 4.01 严格型 --&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"</span><br><span class="line">"http://www.w3.org/TR/html4/strict.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- XHTML 1.0 严格型 --&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC</span><br><span class="line">"-//W3C//DTD XHTML 1.0 Strict//EN"</span><br><span class="line">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></span><br></pre></td></tr></table></figure>
<p> 准标准模式通过使用过渡型（transitional）或框架型（frameset）文档类型来触发：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  HTML 4.01 过渡型 --&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC</span><br><span class="line">"-//W3C//DTD HTML 4.01 Transitional//EN"</span><br><span class="line">"http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  HTML 4.01 框架集型 --&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC</span><br><span class="line">"-//W3C//DTD HTML 4.01 Frameset//EN"</span><br><span class="line">"http://www.w3.org/TR/html4/frameset.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  XHTML 1.0 过渡型 --&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC </span><br><span class="line">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span><br><span class="line">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  XHTML 1.0 框架集型 --&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC </span><br><span class="line">"-//W3C//DTD XHTML 1.0 Frameset//EN"</span><br><span class="line">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;</span></span><br></pre></td></tr></table></figure>
<p> 准标准模式与标准模式非常接近，它们的差异几乎可以忽略不计。<br> IE8又引入了一种新的模式：<br> 超级标准模式：让IE以其所有版本中最符合标准的方式来解释网页内容。<br> 混杂模式让IE像IE5，标准模式使用IE7的呈现引擎，而超级标准模式则是IE8的默认文档模式。<br> 可以用下面的特殊的<meta>值来关闭IE８的默认文档模式：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=7"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p> 其中，content属性中IE的值用于指定使用哪个版本的呈现引擎来呈现页面。</p>
</li>
<li><p><code>&lt;noscript&gt;</code>元素<br>该元素用以在不支持JavaScript的浏览器中显示替代的内容。它可以包含能够出现在文档<code>&lt;body&gt;</code>中的任何HTML元素（<code>&lt;script&gt;</code>元素除外）。<br>包含在<code>&lt;noscript&gt;</code>元素中的内容只有在下列情况下才会显示出来：<br>1）浏览器不支持脚本；<br>2）浏览器支持脚本 ，但脚本被禁用。<br>如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">noscript</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="title">p</span>&gt;</span>本页面需要浏览器支持（启用）JavaScript。</span><br><span class="line">          <span class="tag">&lt;/<span class="title">noscript</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>HTML 4.01为<code>&lt;script&gt;</code>定义了下列5个属性：</p>
<ul>
<li>charset<br>可选。表示通过src属性指定的代码的字符集。由于大多数浏览器会忽略它的值，因此这个属性很少有人用。</li>
<li>defer<br>可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。</li>
<li>language<br>已废弃。原来用于表示编写代码使用的脚本语言（如JavaScript、JavaScript1.2或VBScript）。大多数浏览器会忽略这个属性，因此也没有必要再用了。</li>
<li>src<br>可选。表示包含要执行代码的外部文件。</li>
<li><p>type<br>必需。可以看成是language的替代属性；表示编写代码使用的脚本语言的内容类型（也称为MIME类型）。虽然<code>text/javascript</code>和<code>text/ecmascript</code>都已经不被推荐使用，但人们一直以来使用的都还是<code>text/javascript</code>。实际上，服务器在传送js文件时使用的MIME类型通常是<code>application/x-javascript</code>，但在type中设置这个值却可能导致脚本被忽略。另外，在非IE浏览器中还可以使用一下值：<code>application/javascript</code>和<code>application/ecmascript</code>。考虑到约定俗成和最大限度的浏览器兼容性，目前type属性的值依旧还是<code>text/javascript</code>。</p>]]>
    
    </summary>
    
      <category term="《JavaScript高级程序设计》" scheme="http://chunhui.hu/tags/%E3%80%8AJavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《JavaScript高级程序设计》第1章 JavaScript简介]]></title>
    <link href="http://chunhui.hu/2012/04/08/Professional-JavaScript-for-Web-Developers-Chapter-1-reading-notes/"/>
    <id>http://chunhui.hu/2012/04/08/Professional-JavaScript-for-Web-Developers-Chapter-1-reading-notes/</id>
    <published>2012-04-08T15:37:46.000Z</published>
    <updated>2015-05-01T15:46:41.000Z</updated>
    <content type="html"><![CDATA[<p>JavaScipt是一种专为与网页交互而设计的脚本语言，由下列三个不同的部分组成：</p>
<ol>
<li>ECMAScript，由ECMA-262定义，提供核心语言功能；</li>
<li>文档对象模型（DOM），提供访问和操作网页内容的方法和接口；</li>
<li>浏览器对象模型（BOM），提供与浏览器交互的方法和接口。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>JavaScipt是一种专为与网页交互而设计的脚本语言，由下列三个不同的部分组成：</p>
<ol>
<li>ECMAScript，由ECMA-262定义，提供核心语言功能；</li>
<li>文档对象模型（DOM），提供访问和操作网页内容的方法和接口；</li>
<li>]]>
    </summary>
    
      <category term="《JavaScript高级程序设计》" scheme="http://chunhui.hu/tags/%E3%80%8AJavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E3%80%8B/"/>
    
      <category term="读书笔记" scheme="http://chunhui.hu/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分布式版本控制系统Mercurial安装小记]]></title>
    <link href="http://chunhui.hu/2011/03/07/mercurial-install-memo/"/>
    <id>http://chunhui.hu/2011/03/07/mercurial-install-memo/</id>
    <published>2011-03-07T15:47:49.000Z</published>
    <updated>2015-05-01T05:26:14.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li><p>下载</p>
<p> Mercurial相关下载的维基页面：<a href="http://mercurial.selenic.com/wiki/Download" target="_blank" rel="external">http://mercurial.selenic.com/wiki/Download</a></p>
<p> 各版本的下载地址：<a href="http://mercurial.selenic.com/release/?M=D" target="_blank" rel="external">http://mercurial.selenic.com/release/?M=D</a></p>
<p> 目前最新版本为1.8：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mercurial.selenic.com/release/mercurial-<span class="number">1.8</span>.tar.gz</span><br></pre></td></tr></table></figure>
 <a id="more"></a>
</li>
<li><p>安装</p>
<p> 需要先安装<code>docutils</code>：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://prdownloads.sourceforge.net/docutils/docutils-<span class="number">0.7</span>.tar.gz?download</span><br><span class="line">tar -zxf docutils-<span class="number">0.7</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> docutils-<span class="number">0.7</span></span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p> 如果想查看详细使用命令可以用以下两个命令：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install --help</span><br><span class="line">python setup.py --help</span><br></pre></td></tr></table></figure>
<p> 编译Mercurial：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make all</span><br></pre></td></tr></table></figure>
<p> 默认安装在<code>/usr/local/</code>目录，也可以指定在其他目录，详情请<a href="http://mercurial.selenic.com/wiki/UnixInstall" target="_blank" rel="external">参考</a></p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试是否安装成功</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hg debuginstall</span><br></pre></td></tr></table></figure>
<p> 如果出现以下错误：</p>
<blockquote>
<p>Checking username…<br>no username supplied (see “hg help config”)<br>(specify a username in your .hgrc file)<br>1 problems detected, please check your install!</p>
</blockquote>
<p> 说明配置有问题，源码中contrib文件夹下提供了一个<code>sample.hgrc</code>，可以拷贝过来修改：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp contrib/sample.hgrc /root/.hgrc</span><br><span class="line">vim /root/.hgrc</span><br></pre></td></tr></table></figure>
<p> 找到这行：<code># username = Joe User &lt;j.user@example.com&gt;</code></p>
<p> 去掉前面的#号，修改名称为你自己的，然后保存退出。</p>
<p> 再次运行：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hg debuginstall</span><br></pre></td></tr></table></figure>
<p> 如果出现下列信息：</p>
<blockquote>
<p>Checking encoding (UTF-8)…<br>Checking extensions…<br>Checking templates…<br>Checking patch…<br>Checking commit editor…<br>Checking username…<br>No problems detected</p>
</blockquote>
<p> 说明没有问题，可以使用Mercurial了：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hg</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li><p>下载</p>
<p> Mercurial相关下载的维基页面：<a href="http://mercurial.selenic.com/wiki/Download">http://mercurial.selenic.com/wiki/Download</a></p>
<p> 各版本的下载地址：<a href="http://mercurial.selenic.com/release/?M=D">http://mercurial.selenic.com/release/?M=D</a></p>
<p> 目前最新版本为1.8：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mercurial.selenic.com/release/mercurial-<span class="number">1.8</span>.tar.gz</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://chunhui.hu/tags/Linux/"/>
    
      <category term="Mercurial" scheme="http://chunhui.hu/tags/Mercurial/"/>
    
      <category term="版本控制" scheme="http://chunhui.hu/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS 5.5下安装基于pptpd的VPN服务]]></title>
    <link href="http://chunhui.hu/2010/06/28/install-pptpd-on-centos5-5/"/>
    <id>http://chunhui.hu/2010/06/28/install-pptpd-on-centos5-5/</id>
    <published>2010-06-28T13:06:13.000Z</published>
    <updated>2015-04-30T15:12:32.000Z</updated>
    <content type="html"><![CDATA[<p>在基于Xen技术的VPS下安装步骤如下：</p>
<ol>
<li><p>检查内核是否包含mppe</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe ppp-compress-<span class="number">18</span> &amp;&amp; <span class="built_in">echo</span> ok</span><br></pre></td></tr></table></figure>
<p> 如果出现以下字样：</p>
<blockquote>
<p>FATAL: Could not load /lib/modules/2.6.18.8-xenU/modules.dep: No such file or directory</p>
</blockquote>
<p> 也不要紧，可以继续下面的安装步骤。</p>
 <a id="more"></a>
</li>
<li><p>安装ppp和iptables</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ppp iptables</span><br></pre></td></tr></table></figure>
<p> 下载pptpd的rpm包，注意该包分为32位和64位两个版本，我这里下载64位版本：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.pianzhouzi.com/pptpd/pptpd-<span class="number">1.3</span>.<span class="number">4</span>-<span class="number">1</span>.rhel5.<span class="number">1</span>.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh pptpd-<span class="number">1.3</span>.<span class="number">4</span>-<span class="number">1</span>.rhel5.<span class="number">1</span>.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p> 编辑<code>/etc/ppp/options.pptpd</code>，输入以下内容：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name pptpd</span><br><span class="line">refuse-pap</span><br><span class="line">refuse-chap</span><br><span class="line">refuse-mschap</span><br><span class="line">require-mschap-v2</span><br><span class="line">require-mppe-<span class="number">128</span></span><br><span class="line">proxyarp</span><br><span class="line">lock</span><br><span class="line">nobsdcomp</span><br><span class="line">novj</span><br><span class="line">novjccomp</span><br><span class="line">nologfd</span><br><span class="line">ms-dns <span class="number">208.67</span>.<span class="number">222.222</span></span><br><span class="line">ms-dns <span class="number">208.67</span>.<span class="number">220.220</span></span><br></pre></td></tr></table></figure>
<p> 编辑<code>/etc/pptpd.conf</code>，输入以下内容：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">option /etc/ppp/options.pptpd</span><br><span class="line">logwtmp</span><br><span class="line">localip <span class="number">192.168</span>.<span class="number">10.1</span></span><br><span class="line">remoteip <span class="number">192.168</span>.<span class="number">10.101</span>-<span class="number">110</span></span><br></pre></td></tr></table></figure>
<p> 其中localip是指服务器端IP，remoteip是指客户端IP，数值可以随意填写。但要注意每个建立连接的客户端会自动分配一个IP，因此IP范围最好按照VPS的实际性能情况填写，我这里给了10个连接。</p>
<p> 编辑<code>/etc/ppp/chap-secrets</code>，该文件为客户端连接需要的认证信息，格式如下：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username pptpd password *</span><br></pre></td></tr></table></figure>
<p> 每一行为一条认证信息。</p>
<p> 编辑内核参数文件<code>/etc/sysctl.conf</code>，将<code>net.ipv4.ip_forward</code>的值改为1，保存并退出，执行</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<p> 使之生效。</p>
</li>
<li><p>配置iptables</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport <span class="number">1723</span> -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport <span class="number">47</span> -j ACCEPT</span><br><span class="line">iptables -A INPUT -p gre -j ACCEPT</span><br><span class="line">iptables -t nat -A POSTROUTING <span class="operator">-s</span> <span class="number">192.168</span>.<span class="number">10.0</span>/<span class="number">24</span> -o eth0 -j MASQUERADE</span><br><span class="line">/etc/init.d/iptables save</span><br><span class="line">/etc/init.d/iptables restart</span><br></pre></td></tr></table></figure>
<p> 设置iptables和pptpd开机自动启动：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig pptpd on</span><br><span class="line">chkconfig iptables on</span><br></pre></td></tr></table></figure>
<p> 重新启动VPS即可。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>在基于Xen技术的VPS下安装步骤如下：</p>
<ol>
<li><p>检查内核是否包含mppe</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modprobe ppp-compress-<span class="number">18</span> &amp;&amp; <span class="built_in">echo</span> ok</span><br></pre></td></tr></table></figure>
<p> 如果出现以下字样：</p>
<blockquote>
<p>FATAL: Could not load /lib/modules/2.6.18.8-xenU/modules.dep: No such file or directory</p>
</blockquote>
<p> 也不要紧，可以继续下面的安装步骤。</p>]]>
    
    </summary>
    
      <category term="CentOS" scheme="http://chunhui.hu/tags/CentOS/"/>
    
      <category term="VPN" scheme="http://chunhui.hu/tags/VPN/"/>
    
      <category term="Xen" scheme="http://chunhui.hu/tags/Xen/"/>
    
      <category term="pptpd" scheme="http://chunhui.hu/tags/pptpd/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows下的VMware给Linux虚拟机硬盘扩容]]></title>
    <link href="http://chunhui.hu/2010/06/28/extend-linux-disk-on-vmware/"/>
    <id>http://chunhui.hu/2010/06/28/extend-linux-disk-on-vmware/</id>
    <published>2010-06-28T04:10:25.000Z</published>
    <updated>2015-04-30T12:56:30.000Z</updated>
    <content type="html"><![CDATA[<p>我们在使用虚拟机时，随着时间的增加，经常会遇到原来分配的空间不够用的情况，此时需要对原有硬盘空间做扩容或增加一块新的硬盘。</p>
<h4 id="一、扩大硬盘空间（以下两种任选一）">一、扩大硬盘空间（以下两种任选一）</h4><h5 id="1-_扩大原来的硬盘">1. 扩大原来的硬盘</h5><p>首先关闭虚拟机，进入VMware的安装目录，其中有一个文件vmware-vdiskmanager.exe，在windows命令控制台运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware-vdiskmanager.exe -x <span class="number">15</span>Gb “D:\VM\CentOS\CentOS <span class="number">5</span>.vmdk”</span><br></pre></td></tr></table></figure>
<p>其中的容量和vmdk文件路径请改为你的实际值，vmdk路径如果有空格的话请用双引号引起来。</p>
<h5 id="2-_增加新硬盘">2. 增加新硬盘</h5><p>打开VMware，点击菜单栏中的“虚拟机”——&gt;“设置”，选择Hard Disk，点击“添加”，然后按照提示一路next。</p>
<a id="more"></a>
<h4 id="二、对硬盘分区">二、对硬盘分区</h4><p>运行虚拟机，进入shell界面，输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk <span class="operator">-l</span></span><br></pre></td></tr></table></figure>
<p>查看分区信息。</p>
<p>如果是对原有新盘扩充，则会看到硬盘空间已经增大了；如果是新加了硬盘，则会看到新的硬盘信息，例如以前的硬盘为<code>/dev/sda</code>，则新硬盘为<code>/dev/sdb</code>。这两种情况都需要对硬盘分区。</p>
<p>前者运行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure>
<p>后者运行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>
<p>此时进入提示菜单，输入<code>m</code>或者<code>help</code>可以查看所有命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a   toggle a bootable flag</span><br><span class="line">b   edit bsd disklabel</span><br><span class="line">c   toggle the dos compatibility flag</span><br><span class="line">d   delete a partition</span><br><span class="line">l   list known partition types</span><br><span class="line">m   <span class="built_in">print</span> this menu</span><br><span class="line">n   add a new partition</span><br><span class="line">o   create a new empty DOS partition table</span><br><span class="line">p   <span class="built_in">print</span> the partition table</span><br><span class="line">q   quit without saving changes</span><br><span class="line">s   create a new empty Sun disklabel</span><br><span class="line">t   change a partition<span class="string">'s system id</span><br><span class="line">u   change display/entry units</span><br><span class="line">v   verify the partition table</span><br><span class="line">w   write table to disk and exit</span><br><span class="line">x   extra functionality (experts only)</span></span><br></pre></td></tr></table></figure>
<p>常用的为<code>p</code>（打印分区信息），<code>n</code>（添加一个新的分区），<code>w</code>（写入分区信息到磁盘并退出）。</p>
<p>我们先输入<code>n</code>，得到输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Command action</span><br><span class="line">   e   extended</span><br><span class="line">   p   primary partition (<span class="number">1</span>-<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>在这里我们选择<code>p</code>（主分区），然后按照实际分区信息选择Partition number，其他的直接用默认值。最后输入<code>w</code>，保存并退出。</p>
<p>重启虚拟机后再次运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk <span class="operator">-l</span></span><br></pre></td></tr></table></figure>
<p>可以看到已经出现新的分区信息。</p>
<h4 id="三、格式化新分区并挂载">三、格式化新分区并挂载</h4><p>若新分区为<code>/dev/sda4</code>，则运行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext3 /dev/sda4</span><br></pre></td></tr></table></figure>
<p>将新分区格式化为ext3格式。</p>
<p>创建新文件夹并将新分区挂载：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/nd</span><br><span class="line">mount /dev/sda4 /mnt/nd</span><br></pre></td></tr></table></figure>
<p>修改分区表文件：<code>/etc/fstab</code>，在最后添加一行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda4  /mnt/nd   ext3    defaults    <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>保存后重启虚拟机即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们在使用虚拟机时，随着时间的增加，经常会遇到原来分配的空间不够用的情况，此时需要对原有硬盘空间做扩容或增加一块新的硬盘。</p>
<h4 id="一、扩大硬盘空间（以下两种任选一）">一、扩大硬盘空间（以下两种任选一）</h4><h5 id="1-_扩大原来的硬盘">1. 扩大原来的硬盘</h5><p>首先关闭虚拟机，进入VMware的安装目录，其中有一个文件vmware-vdiskmanager.exe，在windows命令控制台运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware-vdiskmanager.exe -x <span class="number">15</span>Gb “D:\VM\CentOS\CentOS <span class="number">5</span>.vmdk”</span><br></pre></td></tr></table></figure>
<p>其中的容量和vmdk文件路径请改为你的实际值，vmdk路径如果有空格的话请用双引号引起来。</p>
<h5 id="2-_增加新硬盘">2. 增加新硬盘</h5><p>打开VMware，点击菜单栏中的“虚拟机”——&gt;“设置”，选择Hard Disk，点击“添加”，然后按照提示一路next。</p>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://chunhui.hu/tags/Linux/"/>
    
      <category term="VMware" scheme="http://chunhui.hu/tags/VMware/"/>
    
      <category term="disk" scheme="http://chunhui.hu/tags/disk/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Xen VPS时间调整]]></title>
    <link href="http://chunhui.hu/2010/06/27/modify-time-on-xen-vps/"/>
    <id>http://chunhui.hu/2010/06/27/modify-time-on-xen-vps/</id>
    <published>2010-06-26T16:58:04.000Z</published>
    <updated>2015-04-30T13:02:44.000Z</updated>
    <content type="html"><![CDATA[<p>在Xen技术构建的VPS上按照常规的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date <span class="operator">-s</span></span><br></pre></td></tr></table></figure>
<p>命令直接修改系统时间是不奏效的，因为xen默认的设置是自动与主机同步时间。当然，我们可以修改该设置。</p>
<p>打开<code>/etc/sysctl.conf</code>，在最后加上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xen.independent_wallclock=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<p>使其生效。此时就可以任意修改VPS时间了。但是需要注意的是，重启VPS后时间还是会恢复到与主机相同。</p>
<p>PS：实际上修改的值在<code>/proc/sys/xen/independent_wallclock</code>文件中。</p>
<a id="more"></a>
<p>另外，目前国内用户购买的VPS一般都在国外，时区需要调整到中国的东八区。具体方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<p>覆盖之前建议先备份原来的localtime。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Xen技术构建的VPS上按照常规的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date <span class="operator">-s</span></span><br></pre></td></tr></table></figure>
<p>命令直接修改系统时间是不奏效的，因为xen默认的设置是自动与主机同步时间。当然，我们可以修改该设置。</p>
<p>打开<code>/etc/sysctl.conf</code>，在最后加上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xen.independent_wallclock=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<p>使其生效。此时就可以任意修改VPS时间了。但是需要注意的是，重启VPS后时间还是会恢复到与主机相同。</p>
<p>PS：实际上修改的值在<code>/proc/sys/xen/independent_wallclock</code>文件中。</p>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://chunhui.hu/tags/Linux/"/>
    
      <category term="VPS" scheme="http://chunhui.hu/tags/VPS/"/>
    
      <category term="Xen" scheme="http://chunhui.hu/tags/Xen/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS 5.x下Nginx+PHP+Mysql安装手记]]></title>
    <link href="http://chunhui.hu/2010/06/26/install-lnmp-on-centos5/"/>
    <id>http://chunhui.hu/2010/06/26/install-lnmp-on-centos5/</id>
    <published>2010-06-26T13:22:13.000Z</published>
    <updated>2015-04-30T13:03:15.000Z</updated>
    <content type="html"><![CDATA[<p>首先创建一个新文件install_lnmp.sh，输入以下内容：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line"><span class="comment">#该文件为Mysql,PHP,Nginx自动安装脚本</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Author: Eric Hu</span></span><br><span class="line"><span class="comment">#Date:   2010-06-24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####预设的一些变量，按需更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Mysql root用户的密码</span></span><br><span class="line">mysql_<span class="built_in">pwd</span>=<span class="string">"admin"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####创建需要的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#存放下载软件的目录</span></span><br><span class="line">mkdir /soft</span><br><span class="line"><span class="comment">#存放网站文件的目录</span></span><br><span class="line">mkdir /web</span><br><span class="line"><span class="comment">#存放日志文件的目录</span></span><br><span class="line">mkdir -p /data/logs</span><br><span class="line"></span><br><span class="line"><span class="comment">####下载相关软件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /soft</span><br><span class="line"><span class="comment">#mysql www.mysql.com</span></span><br><span class="line">wget http://dev.mysql.com/get/Downloads/MySQL-<span class="number">5.1</span>/mysql-<span class="number">5.1</span>.<span class="number">48</span>-linux-x86_64-glibc23.tar.gz/from/http://mysql.cdpa.nsysu.edu.tw/</span><br><span class="line"><span class="comment">#php www.php.net</span></span><br><span class="line">wget http://cn2.php.net/get/php-<span class="number">5.2</span>.<span class="number">13</span>.tar.gz/from/cn.php.net/mirror</span><br><span class="line"><span class="comment">#php-fpm www.php-fpm.org</span></span><br><span class="line">wget http://php-fpm.org/downloads/php-<span class="number">5.2</span>.<span class="number">13</span>-fpm-<span class="number">0.5</span>.<span class="number">14</span>.diff.gz</span><br><span class="line"><span class="comment">#nginx www.nginx.org</span></span><br><span class="line">wget http://nginx.org/download/nginx-<span class="number">0.7</span>.<span class="number">67</span>.tar.gz</span><br><span class="line"><span class="comment">#nginx需要用到的pcre http://www.pcre.org/</span></span><br><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-<span class="number">8.10</span>.tar.gz</span><br><span class="line"><span class="comment">#libiconv www.gnu.org/software/libiconv/</span></span><br><span class="line">wget http://ftp.gnu.org/pub/gnu/libiconv/libiconv-<span class="number">1.13</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="comment">#libmcrypt http://sourceforge.net/projects/mcrypt/</span></span><br><span class="line">wget http://cdnetworks-kr-<span class="number">2</span>.dl.sourceforge.net/project/mcrypt/Libmcrypt/<span class="number">2.5</span>.<span class="number">8</span>/libmcrypt-<span class="number">2.5</span>.<span class="number">8</span>.tar.gz</span><br><span class="line"><span class="comment">#mcrypt http://sourceforge.net/projects/mcrypt/</span></span><br><span class="line">wget http://cdnetworks-kr-<span class="number">2</span>.dl.sourceforge.net/project/mcrypt/MCrypt/<span class="number">2.6</span>.<span class="number">8</span>/mcrypt-<span class="number">2.6</span>.<span class="number">8</span>.tar.gz</span><br><span class="line"><span class="comment">#mhash http://mhash.sourceforge.net/</span></span><br><span class="line">wget http://cdnetworks-kr-<span class="number">2</span>.dl.sourceforge.net/project/mhash/mhash/<span class="number">0.9</span>.<span class="number">9.9</span>/mhash-<span class="number">0.9</span>.<span class="number">9.9</span>.tar.bz2</span><br><span class="line"><span class="comment">##PHP相关扩展包</span></span><br><span class="line"><span class="comment">#APC http://pecl.php.net/package/APC</span></span><br><span class="line">wget http://pecl.php.net/get/APC-<span class="number">3.0</span>.<span class="number">19</span>.tgz</span><br><span class="line"><span class="comment">#memcache http://pecl.php.net/package/memcache</span></span><br><span class="line">wget http://pecl.php.net/get/memcache-<span class="number">2.2</span>.<span class="number">5</span>.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装需要的系统程序库</span></span><br><span class="line">yum -y install patch gcc gcc-c++ autoconf libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers</span><br><span class="line"></span><br><span class="line"><span class="comment">####安装Mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加Mysql组和用户</span></span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -g mysql mysql</span><br><span class="line"></span><br><span class="line">\cp mysql-<span class="number">5.1</span>.<span class="number">48</span>-linux-x86_64-glibc23.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">tar -zxvf mysql-<span class="number">5.1</span>.<span class="number">48</span>-linux-x86_64-glibc23.tar.gz</span><br><span class="line">mv mysql-<span class="number">5.1</span>.<span class="number">48</span>-linux-x86_64-glibc23 mysql</span><br><span class="line">chown -R mysql.mysql mysql</span><br><span class="line"><span class="comment">#进入mysql目录操作</span></span><br><span class="line"><span class="built_in">cd</span> mysql</span><br><span class="line">\cp support-files/my-medium.cnf /etc/my.cnf</span><br><span class="line">scripts/mysql_install_db --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql </span><br><span class="line"><span class="comment">#设置为开机启动的服务</span></span><br><span class="line">\cp support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">chmod +x /etc/init.d/mysqld</span><br><span class="line">chkconfig --add mysqld</span><br><span class="line"><span class="comment">#开启服务</span></span><br><span class="line">service mysqld start</span><br><span class="line"><span class="comment">#更改root用户密码</span></span><br><span class="line">bin/mysqladmin -u root password <span class="variable">$mysql_pwd</span></span><br><span class="line"><span class="comment">#删除安装包</span></span><br><span class="line">rm <span class="operator">-f</span> /usr/<span class="built_in">local</span>/mysql-<span class="number">5.1</span>.<span class="number">48</span>-linux-x86_64-glibc23.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">####安装PHP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装需要的支持库</span></span><br><span class="line"><span class="built_in">cd</span> /soft</span><br><span class="line"><span class="comment">#安装libiconv</span></span><br><span class="line">tar zxvf libiconv-<span class="number">1.13</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libiconv-<span class="number">1.13</span>.<span class="number">1</span>/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"><span class="comment">#安装libmcrypt</span></span><br><span class="line">tar zxvf libmcrypt-<span class="number">2.5</span>.<span class="number">8</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libmcrypt-<span class="number">2.5</span>.<span class="number">8</span>/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">/sbin/ldconfig</span><br><span class="line"><span class="built_in">cd</span> libltdl/</span><br><span class="line">./configure --enable-ltdl-install</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ../../</span><br><span class="line"><span class="comment">#安装mhash</span></span><br><span class="line">tar jxvf mhash-<span class="number">0.9</span>.<span class="number">9.9</span>.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> mhash-<span class="number">0.9</span>.<span class="number">9.9</span>/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/lib/libmcrypt.la /usr/lib/libmcrypt.la</span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/lib/libmcrypt.so /usr/lib/libmcrypt.so</span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/lib/libmcrypt.so.<span class="number">4</span> /usr/lib/libmcrypt.so.<span class="number">4</span></span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/lib/libmcrypt.so.<span class="number">4.4</span>.<span class="number">8</span> /usr/lib/libmcrypt.so.<span class="number">4.4</span>.<span class="number">8</span></span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/lib/libmhash.a /usr/lib/libmhash.a</span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/lib/libmhash.la /usr/lib/libmhash.la</span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/lib/libmhash.so /usr/lib/libmhash.so</span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/lib/libmhash.so.<span class="number">2</span> /usr/lib/libmhash.so.<span class="number">2</span></span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/lib/libmhash.so.<span class="number">2.0</span>.<span class="number">1</span> /usr/lib/libmhash.so.<span class="number">2.0</span>.<span class="number">1</span></span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/bin/libmcrypt-config /usr/bin/libmcrypt-config</span><br><span class="line"><span class="comment">#安装mcrypt</span></span><br><span class="line">tar zxvf mcrypt-<span class="number">2.6</span>.<span class="number">8</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> mcrypt-<span class="number">2.6</span>.<span class="number">8</span>/</span><br><span class="line">/sbin/ldconfig</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"><span class="comment">#准备安装PHP</span></span><br><span class="line">tar zxvf php-<span class="number">5.2</span>.<span class="number">13</span>.tar.gz</span><br><span class="line"><span class="comment">#打上php-fpm补丁</span></span><br><span class="line">gzip -cd php-<span class="number">5.2</span>.<span class="number">13</span>-fpm-<span class="number">0.5</span>.<span class="number">14</span>.diff.gz | patch <span class="operator">-d</span> php-<span class="number">5.2</span>.<span class="number">13</span> -p1</span><br><span class="line"><span class="built_in">cd</span> php-<span class="number">5.2</span>.<span class="number">13</span>/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php --with-config-file-path=/usr/<span class="built_in">local</span>/php/etc --with-mysql=/usr/<span class="built_in">local</span>/mysql --with-mysqli=/usr/<span class="built_in">local</span>/mysql/bin/mysql_config --with-iconv-dir=/usr/<span class="built_in">local</span> --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-discard-path --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --with-curlwrappers --enable-mbregex --enable-fastcgi --enable-fpm --enable-force-cgi-redirect --enable-mbstring --with-mcrypt --with-gd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear</span><br><span class="line">make ZEND_EXTRA_LIBS=<span class="string">'-liconv'</span></span><br><span class="line">make install</span><br><span class="line">\cp php.ini-dist /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"><span class="comment">#安装memcache扩展</span></span><br><span class="line">tar zxvf memcache-<span class="number">2.2</span>.<span class="number">5</span>.tgz</span><br><span class="line"><span class="built_in">cd</span> memcache-<span class="number">2.2</span>.<span class="number">5</span>/</span><br><span class="line">/usr/<span class="built_in">local</span>/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"><span class="comment">#安装APC扩展</span></span><br><span class="line">tar -zxvf APC-<span class="number">3.0</span>.<span class="number">19</span>.tgz</span><br><span class="line"><span class="built_in">cd</span> APC-<span class="number">3.0</span>.<span class="number">19</span>/</span><br><span class="line">/usr/<span class="built_in">local</span>/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"><span class="comment">#配置php.ini文件</span></span><br><span class="line">sed -i <span class="string">'s#extension_dir = "./"#extension_dir = "/usr/local/php/lib/php/extensions/no-debug-non-zts-20060613/"\nextension = "memcache.so"\nextension = "apc.so"\n#'</span> /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line">sed -i <span class="string">'s#output_buffering = Off#output_buffering = On#'</span> /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line">sed -i <span class="string">'s#magic_quotes_gpc = On#magic_quotes_gpc = Off#'</span> /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line"></span><br><span class="line"><span class="comment">####安装nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加www组和用户</span></span><br><span class="line">/usr/sbin/groupadd www</span><br><span class="line">/usr/sbin/useradd -g www www</span><br><span class="line"><span class="comment">#安装pcre</span></span><br><span class="line">tar -zxvf pcre-<span class="number">8.10</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> pcre-<span class="number">8.10</span>/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"><span class="comment">#准备安装Nginx</span></span><br><span class="line">tar zxvf nginx-<span class="number">0.7</span>.<span class="number">67</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-<span class="number">0.7</span>.<span class="number">67</span>/</span><br><span class="line">./configure --user=www --group=www --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"></span><br><span class="line"><span class="comment">#将/web和/data目录的宿主设为www</span></span><br><span class="line">chown -R www.www /web</span><br><span class="line">chown -R www.www /data</span><br><span class="line"></span><br><span class="line"><span class="comment">####将php-fpm和nginx随系统自动启动</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ulimit -SHn 65535"</span> &gt;&gt; /etc/rc.local</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/usr/local/php/sbin/php-fpm start"</span> &gt;&gt; /etc/rc.local</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/usr/local/nginx/sbin/nginx"</span> &gt;&gt; /etc/rc.local</span><br><span class="line"></span><br><span class="line"><span class="comment">####将mysql和php的可执行命令路径导入环境变量，使之可以在命令行直接输入mysql和php访问，重启后生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=\"\$PATH:/usr/local/php/bin:/usr/local/mysql/bin\""</span> &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure>
<p>赋予install_lnmp.sh可执行权限：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x install_lnmp.sh</span><br></pre></td></tr></table></figure>
<p>执行完毕后再做如下配置：</p>
<p>打开/usr/local/php/etc/php-fpm.conf文件：</p>
<ol>
<li>搜索<code>&lt;value name=&quot;rlimit_files&quot;&gt;</code>，将其后的数字改为<code>65535</code></li>
<li>查找<code>Unix user of processes</code>，去掉<code>&lt;value name=&quot;user&quot;&gt;</code>和<code>&lt;value name=&quot;group&quot;&gt;</code>的注释，并将user和group设为www用户</li>
<li>查找<code>&lt;value name=&quot;display_errors&quot;&gt;</code>，去掉前面的注释，并将0改为1</li>
</ol>
<p>打开/usr/local/nginx/conf/nginx.conf文件，将里面的所有内容替换成以下这些：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">user  www www;</span><br><span class="line"></span><br><span class="line">worker_processes <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">error_<span class="built_in">log</span>  /data/logs/nginx_error.log  crit;</span><br><span class="line"></span><br><span class="line">pid        /usr/<span class="built_in">local</span>/nginx/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Specifies the value for maximum file descriptors that can be opened by this process.</span></span><br><span class="line">worker_rlimit_nofile <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">  use epoll;</span><br><span class="line">  worker_connections <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">  include       mime.types;</span><br><span class="line">  default_<span class="built_in">type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#charset  gb2312;</span></span><br><span class="line">      </span><br><span class="line">  server_names_<span class="built_in">hash</span>_bucket_size <span class="number">128</span>;</span><br><span class="line">  client_header_buffer_size <span class="number">32</span>k;</span><br><span class="line">  large_client_header_buffers <span class="number">4</span> <span class="number">32</span>k;</span><br><span class="line">  client_max_body_size <span class="number">8</span>m;</span><br><span class="line">      </span><br><span class="line">  sendfile on;</span><br><span class="line">  tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">  keepalive_timeout <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">  tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">  fastcgi_connect_timeout <span class="number">300</span>;</span><br><span class="line">  fastcgi_send_timeout <span class="number">300</span>;</span><br><span class="line">  fastcgi_<span class="built_in">read</span>_timeout <span class="number">300</span>;</span><br><span class="line">  fastcgi_buffer_size <span class="number">64</span>k;</span><br><span class="line">  fastcgi_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line">  fastcgi_busy_buffers_size <span class="number">128</span>k;</span><br><span class="line">  fastcgi_temp_file_write_size <span class="number">128</span>k;</span><br><span class="line"></span><br><span class="line">  gzip on;</span><br><span class="line">  gzip_min_length  <span class="number">1</span>k;</span><br><span class="line">  gzip_buffers     <span class="number">4</span> <span class="number">16</span>k;</span><br><span class="line">  gzip_http_version <span class="number">1.0</span>;</span><br><span class="line">  gzip_comp_level <span class="number">2</span>;</span><br><span class="line">  gzip_types       text/plain application/x-javascript text/css application/xml;</span><br><span class="line">  gzip_vary on;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#limit_zone  crawler  $binary_remote_addr  10m;</span></span><br><span class="line"></span><br><span class="line">  server</span><br><span class="line">  &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  <span class="number">192.168</span>.<span class="number">1.88</span>;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    root  /web;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#limit_conn   crawler  20;    </span></span><br><span class="line">                            </span><br><span class="line">    location ~ .*\.(php|php5)?$</span><br><span class="line">    &#123;      </span><br><span class="line">      <span class="comment">#fastcgi_pass  unix:/tmp/php-cgi.sock;</span></span><br><span class="line">      fastcgi_pass  <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9000</span>;</span><br><span class="line">      fastcgi_index index.php;</span><br><span class="line">      include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">      expires      <span class="number">30</span>d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">      expires      <span class="number">1</span>h;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="built_in">log</span>_format  access  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">              <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">              <span class="string">'"$http_user_agent" $http_x_forwarded_for'</span>;</span><br><span class="line">    access_<span class="built_in">log</span>  /data/logs/access.log  access;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  server</span><br><span class="line">  &#123;</span><br><span class="line">    listen  <span class="number">8080</span>;</span><br><span class="line">    server_name  <span class="number">192.168</span>.<span class="number">1.88</span>:<span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_<span class="built_in">log</span>   off;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中的server_name以及目录的对应关系请按自己实际情况更改。</p>
<p>重启系统后即可使用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先创建一个新文件install_lnmp.sh，输入以下内容：</p>]]>
    
    </summary>
    
      <category term="CentOS" scheme="http://chunhui.hu/tags/CentOS/"/>
    
      <category term="Linux" scheme="http://chunhui.hu/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://chunhui.hu/tags/MySQL/"/>
    
      <category term="Nginx" scheme="http://chunhui.hu/tags/Nginx/"/>
    
      <category term="PHP" scheme="http://chunhui.hu/tags/PHP/"/>
    
  </entry>
  
</feed>